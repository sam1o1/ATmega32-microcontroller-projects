
AVRASM ver. 2.1.30  D:\AAST\Microcontroller\Programs\frequency\code\Debug\List\frequency_generator.asm Thu May 14 04:11:17 2020

D:\AAST\Microcontroller\Programs\frequency\code\Debug\List\frequency_generator.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\AAST\Microcontroller\Programs\frequency\code\Debug\List\frequency_generator.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\AAST\Microcontroller\Programs\frequency\code\Debug\List\frequency_generator.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0058 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 0000
00002b 0000
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00002e 0000
00002f 0000
000030 0000
000031 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000032 0000      	.DB  0x0,0x0
                 _0x0:
000033 6e45
000034 6574
000035 2072
000036 204e      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x4E,0x20
000037 666f
000038 6620
000039 2073
00003a 7361      	.DB  0x6F,0x66,0x20,0x66,0x73,0x20,0x61,0x73
00003b 6600
00003c 6c6f
00003d 6f6c
00003e 7377      	.DB  0x0,0x66,0x6F,0x6C,0x6C,0x6F,0x77,0x73
00003f 4e00
000040 662f
000041 2d31
000042 3266      	.DB  0x0,0x4E,0x2F,0x66,0x31,0x2D,0x66,0x32
000043 662b
000044 3d33
000045 4900
000046 564e      	.DB  0x2B,0x66,0x33,0x3D,0x0,0x49,0x4E,0x56
000047 4c41
000048 4449
D:\AAST\Microcontroller\Programs\frequency\code\Debug\List\frequency_generator.asm(1131): warning: .cseg .db misalignment - padding zero byte
000049 0000      	.DB  0x41,0x4C,0x49,0x44,0x0
                 _0x2000060:
D:\AAST\Microcontroller\Programs\frequency\code\Debug\List\frequency_generator.asm(1133): warning: .cseg .db misalignment - padding zero byte
00004a 0001      	.DB  0x1
                 _0x2000000:
00004b 4e2d
00004c 4e41
00004d 4900
00004e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\AAST\Microcontroller\Programs\frequency\code\Debug\List\frequency_generator.asm(1136): warning: .cseg .db misalignment - padding zero byte
00004f 0000      	.DB  0x0
                 _0x2020003:
000050 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000051 0001      	.DW  0x01
000052 0260      	.DW  __seed_G100
000053 0094      	.DW  _0x2000060*2
                 
000054 0002      	.DW  0x02
000055 0264      	.DW  __base_y_G101
000056 00a0      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000057 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000058 94f8      	CLI
000059 27ee      	CLR  R30
00005a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005b e0f1      	LDI  R31,1
00005c bffb      	OUT  GICR,R31
00005d bfeb      	OUT  GICR,R30
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000068 93ed      	ST   X+,R30
000069 9701      	SBIW R24,1
00006a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006b eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006d 9185      	LPM  R24,Z+
00006e 9195      	LPM  R25,Z+
00006f 9700      	SBIW R24,0
000070 f061      	BREQ __GLOBAL_INI_END
000071 91a5      	LPM  R26,Z+
000072 91b5      	LPM  R27,Z+
000073 9005      	LPM  R0,Z+
000074 9015      	LPM  R1,Z+
000075 01bf      	MOVW R22,R30
000076 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000077 9005      	LPM  R0,Z+
000078 920d      	ST   X+,R0
000079 9701      	SBIW R24,1
00007a f7e1      	BRNE __GLOBAL_INI_LOOP
00007b 01fb      	MOVW R30,R22
00007c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007e bfed      	OUT  SPL,R30
00007f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000080 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000081 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000082 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000083 940c 0085 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;void main(void)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0008 //intialization of some needed varabiles
                 ; 0000 0009 int key =0;
                 ; 0000 000A int Nfreq=0;   // number of fequencies needed
                 ; 0000 000B long int feq_1=0;   // frequency one
                 ; 0000 000C long int feq_2=0;   // frequency two
                 ; 0000 000D long int feq_3=0;   // frequency three
                 ; 0000 000E int num_indicator =0; // to differentiate between numbers and operations
                 ; 0000 000F int space =0;  // division sign to seperate the entered frequencies
                 ; 0000 0010 int space_indicator =0;
                 ; 0000 0011 int generate=0;
                 ; 0000 0012 char num[16];
                 ; 0000 0013 DDRC=0b00001111;
000085 97a2      	SBIW R28,34
000086 e182      	LDI  R24,18
000087 e1a0      	LDI  R26,LOW(16)
000088 e0b0      	LDI  R27,HIGH(16)
000089 e5e4      	LDI  R30,LOW(_0x3*2)
00008a e0f0      	LDI  R31,HIGH(_0x3*2)
00008b 940e 028e 	CALL __INITLOCB
                 ;	key -> R16,R17
                 ;	Nfreq -> R18,R19
                 ;	feq_1 -> Y+30
                 ;	feq_2 -> Y+26
                 ;	feq_3 -> Y+22
                 ;	num_indicator -> R20,R21
                 ;	space -> Y+20
                 ;	space_indicator -> Y+18
                 ;	generate -> Y+16
                 ;	num -> Y+0
                +
00008d e000     +LDI R16 , LOW ( 0 )
00008e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00008f e020     +LDI R18 , LOW ( 0 )
000090 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000091 e040     +LDI R20 , LOW ( 0 )
000092 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000093 e0ef      	LDI  R30,LOW(15)
000094 bbe4      	OUT  0x14,R30
                 ; 0000 0014 PORTC=0b0;
000095 e0e0      	LDI  R30,LOW(0)
000096 bbe5      	OUT  0x15,R30
                 ; 0000 0015 DDRB.3=1;
000097 9abb      	SBI  0x17,3
                 ; 0000 0016 DDRD.5=1;
000098 9a8d      	SBI  0x11,5
                 ; 0000 0017 DDRD.7=1;
000099 9a8f      	SBI  0x11,7
                 ; 0000 0018 lcd_init(16);
00009a e1a0      	LDI  R26,LOW(16)
00009b 940e 0216 	CALL _lcd_init
                 ; 0000 0019 lcd_gotoxy(0,0);
00009d e0e0      	LDI  R30,LOW(0)
00009e 93ea      	ST   -Y,R30
00009f e0a0      	LDI  R26,LOW(0)
0000a0 940e 01c6 	CALL _lcd_gotoxy
                 ; 0000 001A lcd_putsf("Enter N of fs as");
                +
0000a2 e6a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000a3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000a4 940e 0203 	CALL _lcd_putsf
                 ; 0000 001B lcd_gotoxy(0,1);
0000a6 e0e0      	LDI  R30,LOW(0)
0000a7 93ea      	ST   -Y,R30
0000a8 e0a1      	LDI  R26,LOW(1)
0000a9 940e 01c6 	CALL _lcd_gotoxy
                 ; 0000 001C lcd_putsf("follows");
                +
0000ab e7a7     +LDI R26 , LOW ( 2 * _0x0 + ( 17 ) )
0000ac e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW2FN _0x0,17
0000ad 940e 0244 	CALL SUBOPT_0x0
                 ; 0000 001D delay_ms(2000);
                 ; 0000 001E lcd_clear();
                 ; 0000 001F lcd_putsf("N/f1-f2+f3=");  // to guide the user so that the inputs are correctly entered
                +
0000af e7af     +LDI R26 , LOW ( 2 * _0x0 + ( 25 ) )
0000b0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW2FN _0x0,25
0000b1 940e 0244 	CALL SUBOPT_0x0
                 ; 0000 0020 delay_ms(2000);
                 ; 0000 0021 lcd_clear();
                 ; 0000 0022 while (1)
                 _0xA:
                 ; 0000 0023     {
                 ; 0000 0024 
                 ; 0000 0025 
                 ; 0000 0026      PORTC.0=1;
0000b3 9aa8      	SBI  0x15,0
                 ; 0000 0027      if (PINC.4==1) {while(PINC.4==1){}      key=7; num_indicator =1;}
0000b4 9b9c      	SBIS 0x13,4
0000b5 c007      	RJMP _0xF
                 _0x10:
0000b6 999c      	SBIC 0x13,4
0000b7 cffe      	RJMP _0x10
                +
0000b8 e007     +LDI R16 , LOW ( 7 )
0000b9 e010     +LDI R17 , HIGH ( 7 )
                 	__GETWRN 16,17,7
                +
0000ba e041     +LDI R20 , LOW ( 1 )
0000bb e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0028     else if (PINC.5==1) {while(PINC.5==1){}  key=8; num_indicator =1;}
0000bc c01a      	RJMP _0x13
                 _0xF:
0000bd 9b9d      	SBIS 0x13,5
0000be c007      	RJMP _0x14
                 _0x15:
0000bf 999d      	SBIC 0x13,5
0000c0 cffe      	RJMP _0x15
                +
0000c1 e008     +LDI R16 , LOW ( 8 )
0000c2 e010     +LDI R17 , HIGH ( 8 )
                 	__GETWRN 16,17,8
                +
0000c3 e041     +LDI R20 , LOW ( 1 )
0000c4 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0029     else if (PINC.6==1){ while(PINC.6==1){}  key=9; num_indicator =1; }
0000c5 c011      	RJMP _0x18
                 _0x14:
0000c6 9b9e      	SBIS 0x13,6
0000c7 c007      	RJMP _0x19
                 _0x1A:
0000c8 999e      	SBIC 0x13,6
0000c9 cffe      	RJMP _0x1A
                +
0000ca e009     +LDI R16 , LOW ( 9 )
0000cb e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                +
0000cc e041     +LDI R20 , LOW ( 1 )
0000cd e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 002A     else if (PINC.7==1){ while(PINC.7==1){}space=1; space_indicator =1;}
0000ce c008      	RJMP _0x1D
                 _0x19:
0000cf 9b9f      	SBIS 0x13,7
0000d0 c006      	RJMP _0x1E
                 _0x1F:
0000d1 999f      	SBIC 0x13,7
0000d2 cffe      	RJMP _0x1F
0000d3 e0e1      	LDI  R30,LOW(1)
0000d4 e0f0      	LDI  R31,HIGH(1)
0000d5 940e 024c 	CALL SUBOPT_0x1
                 ; 0000 002B      delay_ms (10);
                 _0x1E:
                 _0x1D:
                 _0x18:
                 _0x13:
0000d7 940e 0253 	CALL SUBOPT_0x2
                 ; 0000 002C      PORTC.0=0;
0000d9 98a8      	CBI  0x15,0
                 ; 0000 002D      PORTC.1=1;
0000da 9aa9      	SBI  0x15,1
                 ; 0000 002E     if (PINC.4==1) {while(PINC.4==1){}  key=4; num_indicator =1;}
0000db 9b9c      	SBIS 0x13,4
0000dc c005      	RJMP _0x26
                 _0x27:
0000dd 999c      	SBIC 0x13,4
0000de cffe      	RJMP _0x27
                +
0000df e004     +LDI R16 , LOW ( 4 )
0000e0 e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
0000e1 c00d      	RJMP _0x66
                 ; 0000 002F     else if (PINC.5==1) {while(PINC.5==1){}  key=5; num_indicator =1;}
                 _0x26:
0000e2 9b9d      	SBIS 0x13,5
0000e3 c005      	RJMP _0x2B
                 _0x2C:
0000e4 999d      	SBIC 0x13,5
0000e5 cffe      	RJMP _0x2C
                +
0000e6 e005     +LDI R16 , LOW ( 5 )
0000e7 e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
0000e8 c006      	RJMP _0x66
                 ; 0000 0030     else if (PINC.6==1){ while(PINC.6==1){}  key=6; num_indicator =1;}
                 _0x2B:
0000e9 9b9e      	SBIS 0x13,6
0000ea c006      	RJMP _0x30
                 _0x31:
0000eb 999e      	SBIC 0x13,6
0000ec cffe      	RJMP _0x31
                +
0000ed e006     +LDI R16 , LOW ( 6 )
0000ee e010     +LDI R17 , HIGH ( 6 )
                 	__GETWRN 16,17,6
                 _0x66:
                +
0000ef e041     +LDI R20 , LOW ( 1 )
0000f0 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0031   // I did not map the multiplication button as it is not needed
                 ; 0000 0032      delay_ms (10);
                 _0x30:
0000f1 940e 0253 	CALL SUBOPT_0x2
                 ; 0000 0033      PORTC.1=0;
0000f3 98a9      	CBI  0x15,1
                 ; 0000 0034      PORTC.2=1;
0000f4 9aaa      	SBI  0x15,2
                 ; 0000 0035      if (PINC.4==1) {while(PINC.4==1){}  key=1; num_indicator =1;}
0000f5 9b9c      	SBIS 0x13,4
0000f6 c007      	RJMP _0x38
                 _0x39:
0000f7 999c      	SBIC 0x13,4
0000f8 cffe      	RJMP _0x39
                +
0000f9 e001     +LDI R16 , LOW ( 1 )
0000fa e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                +
0000fb e041     +LDI R20 , LOW ( 1 )
0000fc e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0036     else if (PINC.5==1) {while(PINC.5==1){}  key=2; num_indicator =1; }
0000fd c01a      	RJMP _0x3C
                 _0x38:
0000fe 9b9d      	SBIS 0x13,5
0000ff c007      	RJMP _0x3D
                 _0x3E:
000100 999d      	SBIC 0x13,5
000101 cffe      	RJMP _0x3E
                +
000102 e002     +LDI R16 , LOW ( 2 )
000103 e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                +
000104 e041     +LDI R20 , LOW ( 1 )
000105 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0037     else if (PINC.6==1){ while(PINC.6==1){} key=3; num_indicator =1;}
000106 c011      	RJMP _0x41
                 _0x3D:
000107 9b9e      	SBIS 0x13,6
000108 c007      	RJMP _0x42
                 _0x43:
000109 999e      	SBIC 0x13,6
00010a cffe      	RJMP _0x43
                +
00010b e003     +LDI R16 , LOW ( 3 )
00010c e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                +
00010d e041     +LDI R20 , LOW ( 1 )
00010e e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0038        else if (PINC.7==1){ while(PINC.7==1){} space=2;space_indicator =1;}
00010f c008      	RJMP _0x46
                 _0x42:
000110 9b9f      	SBIS 0x13,7
000111 c006      	RJMP _0x47
                 _0x48:
000112 999f      	SBIC 0x13,7
000113 cffe      	RJMP _0x48
000114 e0e2      	LDI  R30,LOW(2)
000115 e0f0      	LDI  R31,HIGH(2)
000116 940e 024c 	CALL SUBOPT_0x1
                 ; 0000 0039      delay_ms (10);
                 _0x47:
                 _0x46:
                 _0x41:
                 _0x3C:
000118 940e 0253 	CALL SUBOPT_0x2
                 ; 0000 003A      PORTC.2=0;
00011a 98aa      	CBI  0x15,2
                 ; 0000 003B      PORTC.3=1;
00011b 9aab      	SBI  0x15,3
                 ; 0000 003C      //if (PINC.4==1) {while(PINC.4==1){} { key=0;}
                 ; 0000 003D  if (PINC.5==1) {while(PINC.5==1){}  key=0; num_indicator =1;}
00011c 9b9d      	SBIS 0x13,5
00011d c007      	RJMP _0x4F
                 _0x50:
00011e 999d      	SBIC 0x13,5
00011f cffe      	RJMP _0x50
                +
000120 e000     +LDI R16 , LOW ( 0 )
000121 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000122 e041     +LDI R20 , LOW ( 1 )
000123 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 003E  else if (PINC.6==1) {while(PINC.6==1){}  generate=1;}    // when = is pressed the generation process begins
000124 c011      	RJMP _0x53
                 _0x4F:
000125 9b9e      	SBIS 0x13,6
000126 c007      	RJMP _0x54
                 _0x55:
000127 999e      	SBIC 0x13,6
000128 cffe      	RJMP _0x55
000129 e0e1      	LDI  R30,LOW(1)
00012a e0f0      	LDI  R31,HIGH(1)
00012b 8be8      	STD  Y+16,R30
00012c 8bf9      	STD  Y+16+1,R31
                 ; 0000 003F       else if (PINC.7==1){ while(PINC.7==1){} space=3;space_indicator =1;}        // +
00012d c008      	RJMP _0x58
                 _0x54:
00012e 9b9f      	SBIS 0x13,7
00012f c006      	RJMP _0x59
                 _0x5A:
000130 999f      	SBIC 0x13,7
000131 cffe      	RJMP _0x5A
000132 e0e3      	LDI  R30,LOW(3)
000133 e0f0      	LDI  R31,HIGH(3)
000134 940e 024c 	CALL SUBOPT_0x1
                 ; 0000 0040     PORTC.3=0;
                 _0x59:
                 _0x58:
                 _0x53:
000136 98ab      	CBI  0x15,3
                 ; 0000 0041     delay_ms (10);
000137 940e 0253 	CALL SUBOPT_0x2
                 ; 0000 0042    if ( space==0 && num_indicator==1) {
000139 89ac      	LDD  R26,Y+20
00013a 89bd      	LDD  R27,Y+20+1
00013b 9710      	SBIW R26,0
00013c f429      	BRNE _0x60
00013d e0e1      	LDI  R30,LOW(1)
00013e e0f0      	LDI  R31,HIGH(1)
00013f 17e4      	CP   R30,R20
000140 07f5      	CPC  R31,R21
000141 f009      	BREQ _0x61
                 _0x60:
000142 c013      	RJMP _0x5F
                 _0x61:
                 ; 0000 0043      Nfreq = Nfreq*10+ key;
000143 01f9      	MOVW R30,R18
000144 e0aa      	LDI  R26,LOW(10)
000145 e0b0      	LDI  R27,HIGH(10)
000146 940e 027b 	CALL __MULW12
000148 0fe0      	ADD  R30,R16
000149 1ff1      	ADC  R31,R17
00014a 019f      	MOVW R18,R30
                 ; 0000 0044      itoa(key,num);
00014b 931a      	ST   -Y,R17
00014c 930a      	ST   -Y,R16
00014d 01de      	MOVW R26,R28
00014e 9612      	ADIW R26,2
00014f 940e 0178 	CALL _itoa
                 ; 0000 0045      Nfreq=0;
                +
000151 e020     +LDI R18 , LOW ( 0 )
000152 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0046      lcd_puts(num);  }
000153 01de      	MOVW R26,R28
000154 940e 01f4 	CALL _lcd_puts
                 ; 0000 0047      num_indicator=0;
                 _0x5F:
                +
000156 e040     +LDI R20 , LOW ( 0 )
000157 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 0048    if ((Nfreq >3) && space==0 && num_indicator==1) {
                +
000158 3024     +CPI R18 , LOW ( 4 )
000159 e0e0     +LDI R30 , HIGH ( 4 )
00015a 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
00015b f04c      	BRLT _0x63
00015c 89ac      	LDD  R26,Y+20
00015d 89bd      	LDD  R27,Y+20+1
00015e 9710      	SBIW R26,0
00015f f429      	BRNE _0x63
000160 e0e1      	LDI  R30,LOW(1)
000161 e0f0      	LDI  R31,HIGH(1)
000162 17e4      	CP   R30,R20
000163 07f5      	CPC  R31,R21
000164 f009      	BREQ _0x64
                 _0x63:
000165 c00a      	RJMP _0x62
                 _0x64:
                 ; 0000 0049      lcd_clear();
000166 940e 01d3 	CALL _lcd_clear
                 ; 0000 004A      lcd_putsf ("INVALID");
                +
000168 e8ab     +LDI R26 , LOW ( 2 * _0x0 + ( 37 ) )
000169 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW2FN _0x0,37
00016a 940e 0203 	CALL _lcd_putsf
                 ; 0000 004B      delay_ms(1000); }
00016c eea8      	LDI  R26,LOW(1000)
00016d e0b3      	LDI  R27,HIGH(1000)
00016e 940e 0265 	CALL _delay_ms
                 ; 0000 004C      Nfreq=0;
                 _0x62:
                +
000170 e020     +LDI R18 , LOW ( 0 )
000171 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 004D      num_indicator=0;
                +
000172 e040     +LDI R20 , LOW ( 0 )
000173 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 004E      lcd_clear();
000174 940e 01d3 	CALL _lcd_clear
                 ; 0000 004F  }
000176 cf3c      	RJMP _0xA
                 ; 0000 0050 }
                 _0x65:
000177 cfff      	RJMP _0x65
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000178 93ba      	ST   -Y,R27
000179 93aa      	ST   -Y,R26
00017a 91a9          ld   r26,y+
00017b 91b9          ld   r27,y+
00017c 91e9          ld   r30,y+
00017d 91f9          ld   r31,y+
00017e 9630          adiw r30,0
00017f f42a          brpl __itoa0
000180 95e0          com  r30
000181 95f0          com  r31
000182 9631          adiw r30,1
000183 e26d          ldi  r22,'-'
000184 936d          st   x+,r22
                 __itoa0:
000185 94e8          clt
000186 e180          ldi  r24,low(10000)
000187 e297          ldi  r25,high(10000)
000188 d00d          rcall __itoa1
000189 ee88          ldi  r24,low(1000)
00018a e093          ldi  r25,high(1000)
00018b d00a          rcall __itoa1
00018c e684          ldi  r24,100
00018d 2799          clr  r25
00018e d007          rcall __itoa1
00018f e08a          ldi  r24,10
000190 d005          rcall __itoa1
000191 2f6e          mov  r22,r30
000192 d010          rcall __itoa5
000193 2766          clr  r22
000194 936c          st   x,r22
000195 9508          ret
                 
                 __itoa1:
000196 2766          clr	 r22
                 __itoa2:
000197 17e8          cp   r30,r24
000198 07f9          cpc  r31,r25
000199 f020          brlo __itoa3
00019a 9563          inc  r22
00019b 1be8          sub  r30,r24
00019c 0bf9          sbc  r31,r25
00019d f7c9          brne __itoa2
                 __itoa3:
00019e 2366          tst  r22
00019f f411          brne __itoa4
0001a0 f016          brts __itoa5
0001a1 9508          ret
                 __itoa4:
0001a2 9468          set
                 __itoa5:
0001a3 5d60          subi r22,-0x30
0001a4 936d          st   x+,r22
0001a5 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0001a6 93aa      	ST   -Y,R26
0001a7 b3eb      	IN   R30,0x1B
0001a8 70ef      	ANDI R30,LOW(0xF)
0001a9 2fae      	MOV  R26,R30
0001aa 81e8      	LD   R30,Y
0001ab 7fe0      	ANDI R30,LOW(0xF0)
0001ac 2bea      	OR   R30,R26
0001ad bbeb      	OUT  0x1B,R30
                +
0001ae e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001af 958a     +DEC R24
0001b0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001b1 9ada      	SBI  0x1B,2
                +
0001b2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001b3 958a     +DEC R24
0001b4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001b5 98da      	CBI  0x1B,2
                +
0001b6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001b7 958a     +DEC R24
0001b8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001b9 c088      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ba 93aa      	ST   -Y,R26
0001bb 81a8      	LD   R26,Y
0001bc dfe9      	RCALL __lcd_write_nibble_G101
0001bd 81e8          ld    r30,y
0001be 95e2          swap  r30
0001bf 83e8          st    y,r30
0001c0 81a8      	LD   R26,Y
0001c1 dfe4      	RCALL __lcd_write_nibble_G101
                +
0001c2 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001c3 958a     +DEC R24
0001c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001c5 c07c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001c6 93aa      	ST   -Y,R26
0001c7 81e8      	LD   R30,Y
0001c8 e0f0      	LDI  R31,0
0001c9 59ec      	SUBI R30,LOW(-__base_y_G101)
0001ca 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0001cb 81e0      	LD   R30,Z
0001cc 81a9      	LDD  R26,Y+1
0001cd 0fae      	ADD  R26,R30
0001ce dfeb      	RCALL __lcd_write_data
0001cf 8059      	LDD  R5,Y+1
0001d0 8048      	LDD  R4,Y+0
0001d1 9622      	ADIW R28,2
0001d2 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001d3 e0a2      	LDI  R26,LOW(2)
0001d4 940e 0257 	CALL SUBOPT_0x3
0001d6 e0ac      	LDI  R26,LOW(12)
0001d7 dfe2      	RCALL __lcd_write_data
0001d8 e0a1      	LDI  R26,LOW(1)
0001d9 940e 0257 	CALL SUBOPT_0x3
0001db e0e0      	LDI  R30,LOW(0)
0001dc 2e4e      	MOV  R4,R30
0001dd 2e5e      	MOV  R5,R30
0001de 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001df 93aa      	ST   -Y,R26
0001e0 81a8      	LD   R26,Y
0001e1 30aa      	CPI  R26,LOW(0xA)
0001e2 f011      	BREQ _0x2020005
0001e3 1457      	CP   R5,R7
0001e4 f048      	BRLO _0x2020004
                 _0x2020005:
0001e5 e0e0      	LDI  R30,LOW(0)
0001e6 93ea      	ST   -Y,R30
0001e7 9443      	INC  R4
0001e8 2da4      	MOV  R26,R4
0001e9 dfdc      	RCALL _lcd_gotoxy
0001ea 81a8      	LD   R26,Y
0001eb 30aa      	CPI  R26,LOW(0xA)
0001ec f409      	BRNE _0x2020007
0001ed c054      	RJMP _0x20A0001
                 _0x2020007:
                 _0x2020004:
0001ee 9453      	INC  R5
0001ef 9ad8      	SBI  0x1B,0
0001f0 81a8      	LD   R26,Y
0001f1 dfc8      	RCALL __lcd_write_data
0001f2 98d8      	CBI  0x1B,0
0001f3 c04e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001f4 93ba      	ST   -Y,R27
0001f5 93aa      	ST   -Y,R26
0001f6 931a      	ST   -Y,R17
                 _0x2020008:
0001f7 81a9      	LDD  R26,Y+1
0001f8 81ba      	LDD  R27,Y+1+1
0001f9 91ed      	LD   R30,X+
0001fa 83a9      	STD  Y+1,R26
0001fb 83ba      	STD  Y+1+1,R27
0001fc 2f1e      	MOV  R17,R30
0001fd 30e0      	CPI  R30,0
0001fe f019      	BREQ _0x202000A
0001ff 2fa1      	MOV  R26,R17
000200 dfde      	RCALL _lcd_putchar
000201 cff5      	RJMP _0x2020008
                 _0x202000A:
000202 c010      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000203 93ba      	ST   -Y,R27
000204 93aa      	ST   -Y,R26
000205 931a      	ST   -Y,R17
                 _0x202000B:
000206 81e9      	LDD  R30,Y+1
000207 81fa      	LDD  R31,Y+1+1
000208 9631      	ADIW R30,1
000209 83e9      	STD  Y+1,R30
00020a 83fa      	STD  Y+1+1,R31
00020b 9731      	SBIW R30,1
00020c 91e4      	LPM  R30,Z
00020d 2f1e      	MOV  R17,R30
00020e 30e0      	CPI  R30,0
00020f f019      	BREQ _0x202000D
000210 2fa1      	MOV  R26,R17
000211 dfcd      	RCALL _lcd_putchar
000212 cff3      	RJMP _0x202000B
                 _0x202000D:
                 _0x20A0002:
000213 8118      	LDD  R17,Y+0
000214 9623      	ADIW R28,3
000215 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000216 93aa      	ST   -Y,R26
000217 b3ea      	IN   R30,0x1A
000218 6fe0      	ORI  R30,LOW(0xF0)
000219 bbea      	OUT  0x1A,R30
00021a 9ad2      	SBI  0x1A,2
00021b 9ad0      	SBI  0x1A,0
00021c 9ad1      	SBI  0x1A,1
00021d 98da      	CBI  0x1B,2
00021e 98d8      	CBI  0x1B,0
00021f 98d9      	CBI  0x1B,1
000220 8078      	LDD  R7,Y+0
000221 81e8      	LD   R30,Y
000222 58e0      	SUBI R30,-LOW(128)
                +
000223 93e0 0266+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000225 81e8      	LD   R30,Y
000226 54e0      	SUBI R30,-LOW(192)
                +
000227 93e0 0267+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000229 e1a4      	LDI  R26,LOW(20)
00022a e0b0      	LDI  R27,0
00022b 940e 0265 	CALL _delay_ms
00022d 940e 025d 	CALL SUBOPT_0x4
00022f 940e 025d 	CALL SUBOPT_0x4
000231 940e 025d 	CALL SUBOPT_0x4
000233 e2a0      	LDI  R26,LOW(32)
000234 df71      	RCALL __lcd_write_nibble_G101
                +
000235 ec88     +LDI R24 , LOW ( 200 )
000236 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000237 9701     +SBIW R24 , 1
000238 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000239 e2a8      	LDI  R26,LOW(40)
00023a df7f      	RCALL __lcd_write_data
00023b e0a4      	LDI  R26,LOW(4)
00023c df7d      	RCALL __lcd_write_data
00023d e8a5      	LDI  R26,LOW(133)
00023e df7b      	RCALL __lcd_write_data
00023f e0a6      	LDI  R26,LOW(6)
000240 df79      	RCALL __lcd_write_data
000241 df91      	RCALL _lcd_clear
                 _0x20A0001:
000242 9621      	ADIW R28,1
000243 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G100:
000260           	.BYTE 0x4
                 __base_y_G101:
000264           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000244 940e 0203 	CALL _lcd_putsf
000246 eda0      	LDI  R26,LOW(2000)
000247 e0b7      	LDI  R27,HIGH(2000)
000248 940e 0265 	CALL _delay_ms
00024a 940c 01d3 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00024c 8bec      	STD  Y+20,R30
00024d 8bfd      	STD  Y+20+1,R31
00024e e0e1      	LDI  R30,LOW(1)
00024f e0f0      	LDI  R31,HIGH(1)
000250 8bea      	STD  Y+18,R30
000251 8bfb      	STD  Y+18+1,R31
000252 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000253 e0aa      	LDI  R26,LOW(10)
000254 e0b0      	LDI  R27,0
000255 940c 0265 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000257 940e 01ba 	CALL __lcd_write_data
000259 e0a3      	LDI  R26,LOW(3)
00025a e0b0      	LDI  R27,0
00025b 940c 0265 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
00025d e3a0      	LDI  R26,LOW(48)
00025e 940e 01a6 	CALL __lcd_write_nibble_G101
                +
000260 ec88     +LDI R24 , LOW ( 200 )
000261 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000262 9701     +SBIW R24 , 1
000263 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000264 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000265 9610      	adiw r26,0
000266 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000267 ed80     +LDI R24 , LOW ( 0x7D0 )
000268 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000269 9701     +SBIW R24 , 1
00026a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00026b 95a8      	wdr
00026c 9711      	sbiw r26,1
00026d f7c9      	brne __delay_ms0
                 __delay_ms1:
00026e 9508      	ret
                 
                 __ANEGW1:
00026f 95f1      	NEG  R31
000270 95e1      	NEG  R30
000271 40f0      	SBCI R31,0
000272 9508      	RET
                 
                 __MULW12U:
000273 9ffa      	MUL  R31,R26
000274 2df0      	MOV  R31,R0
000275 9feb      	MUL  R30,R27
000276 0df0      	ADD  R31,R0
000277 9fea      	MUL  R30,R26
000278 2de0      	MOV  R30,R0
000279 0df1      	ADD  R31,R1
00027a 9508      	RET
                 
                 __MULW12:
00027b d004      	RCALL __CHKSIGNW
00027c dff6      	RCALL __MULW12U
00027d f40e      	BRTC __MULW121
00027e dff0      	RCALL __ANEGW1
                 __MULW121:
00027f 9508      	RET
                 
                 __CHKSIGNW:
000280 94e8      	CLT
000281 fff7      	SBRS R31,7
000282 c002      	RJMP __CHKSW1
000283 dfeb      	RCALL __ANEGW1
000284 9468      	SET
                 __CHKSW1:
000285 ffb7      	SBRS R27,7
000286 c006      	RJMP __CHKSW2
000287 95a0      	COM  R26
000288 95b0      	COM  R27
000289 9611      	ADIW R26,1
00028a f800      	BLD  R0,0
00028b 9403      	INC  R0
00028c fa00      	BST  R0,0
                 __CHKSW2:
00028d 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00028e 0fac      	ADD  R26,R28
00028f 1fbd      	ADC  R27,R29
                 __INITLOC0:
000290 9005      	LPM  R0,Z+
000291 920d      	ST   X+,R0
000292 958a      	DEC  R24
000293 f7e1      	BRNE __INITLOC0
000294 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  12 r1 :   2 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  13 r17:  20 r18:   6 r19:   4 r20:  13 r21:  13 r22:  12 r23:   0 
r24:  29 r25:  10 r26:  65 r27:  25 r28:   8 r29:   2 r30:  89 r31:  32 
x  :   8 y  :  56 z  :  10 
Registers used: 23 out of 35 (65.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :   9 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   1 brmi  :   0 brne  :  17 brpl  :   1 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  31 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   4 cpc   :   4 cpi   :   5 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  25 ld    :  16 ldd   :  13 ldi   : 138 
lds   :   0 lpm   :  10 lsl   :   0 lsr   :   0 mov   :  11 movw  :   7 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   1 out   :  10 pop   :   0 push  :   0 rcall :  23 ret   :  15 
reti  :   0 rjmp  :  52 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :  12 sbic  :  14 sbis  :  14 sbiw  :  11 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :  10 sts   :   2 sub   :   1 subi  :   4 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00052a   1230     92   1322   32768   4.0%
[.dseg] 0x000060 0x000268      0      8      8    2048   0.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
