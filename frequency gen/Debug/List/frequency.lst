
AVRASM ver. 2.1.30  D:\AAST\Microcontroller\Programs\frequency gen\Debug\List\frequency.asm Fri May 15 22:43:43 2020

D:\AAST\Microcontroller\Programs\frequency gen\Debug\List\frequency.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\AAST\Microcontroller\Programs\frequency gen\Debug\List\frequency.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\AAST\Microcontroller\Programs\frequency gen\Debug\List\frequency.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0063 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 0000
00002b 0000
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00002e 0000
00002f 0000
000030 0000
000031 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000032 0000
000033 0000
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000036 0000
000037 0000
000038 0000
000039 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003a 0000
00003b 0000
00003c 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
00003d 6e45
00003e 6574
00003f 2072
000040 204e      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x4E,0x20
000041 666f
000042 6620
000043 2073
000044 7361      	.DB  0x6F,0x66,0x20,0x66,0x73,0x20,0x61,0x73
000045 6600
000046 6c6f
000047 6f6c
000048 7377      	.DB  0x0,0x66,0x6F,0x6C,0x6C,0x6F,0x77,0x73
000049 4e00
00004a 662f
00004b 2d31
00004c 3266      	.DB  0x0,0x4E,0x2F,0x66,0x31,0x2D,0x66,0x32
00004d 662b
00004e 0033
00004f 6920
000050 2073      	.DB  0x2B,0x66,0x33,0x0,0x20,0x69,0x73,0x20
000051 4e49
000052 4156
000053 494c
000054 0044      	.DB  0x49,0x4E,0x56,0x41,0x4C,0x49,0x44,0x0
                 _0x2000060:
D:\AAST\Microcontroller\Programs\frequency gen\Debug\List\frequency.asm(1135): warning: .cseg .db misalignment - padding zero byte
000055 0001      	.DB  0x1
                 _0x2000000:
000056 4e2d
000057 4e41
000058 4900
000059 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\AAST\Microcontroller\Programs\frequency gen\Debug\List\frequency.asm(1138): warning: .cseg .db misalignment - padding zero byte
00005a 0000      	.DB  0x0
                 _0x2020003:
00005b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00005c 0001      	.DW  0x01
00005d 0260      	.DW  __seed_G100
00005e 00aa      	.DW  _0x2000060*2
                 
00005f 0002      	.DW  0x02
000060 0264      	.DW  __base_y_G101
000061 00b6      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000062 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000063 94f8      	CLI
000064 27ee      	CLR  R30
000065 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000066 e0f1      	LDI  R31,1
000067 bffb      	OUT  GICR,R31
000068 bfeb      	OUT  GICR,R30
000069 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006a e08d      	LDI  R24,(14-2)+1
00006b e0a2      	LDI  R26,2
00006c 27bb      	CLR  R27
                 __CLEAR_REG:
00006d 93ed      	ST   X+,R30
00006e 958a      	DEC  R24
00006f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000070 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000071 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000072 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000073 93ed      	ST   X+,R30
000074 9701      	SBIW R24,1
000075 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000076 ebe8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000077 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000078 9185      	LPM  R24,Z+
000079 9195      	LPM  R25,Z+
00007a 9700      	SBIW R24,0
00007b f061      	BREQ __GLOBAL_INI_END
00007c 91a5      	LPM  R26,Z+
00007d 91b5      	LPM  R27,Z+
00007e 9005      	LPM  R0,Z+
00007f 9015      	LPM  R1,Z+
000080 01bf      	MOVW R22,R30
000081 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000082 9005      	LPM  R0,Z+
000083 920d      	ST   X+,R0
000084 9701      	SBIW R24,1
000085 f7e1      	BRNE __GLOBAL_INI_LOOP
000086 01fb      	MOVW R30,R22
000087 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000088 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000089 bfed      	OUT  SPL,R30
00008a e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008e 940c 0090 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;  //EFORE USING!!!!!
                 ;  //in order to enter three frequencies, you sould do that in the follwing form
                 ;  // N (number of frequencies) / division sign to seperate N and the first number - the subtraction sign to sperate the  ...
                 ;  // finally + to seperate the third number and the firdt two ( N/feq_1-feq_2+feq_3
                 ;  // to generate feq_1 please press =, to generate feq_2 please enter X and to generate feq_3 please enter ON/Off button
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;void main(void)
                 ; 0000 000D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000E //intialization of some needed varabiles
                 ; 0000 000F int key =0;
                 ; 0000 0010 int Nfreq=0;              // number of fequencies needed
                 ; 0000 0011 long int feq_1=0;        // frequency one
                 ; 0000 0012 long int feq_2=0;       // frequency two
                 ; 0000 0013 long int feq_3=0;      // frequency three
                 ; 0000 0014   // please note that the accepted number of requencies should not exceed three
                 ; 0000 0015 int num_indicator =0; // to differentiate between numbers and operators
                 ; 0000 0016 int space =0;        // division sign to seperate the entered frequencies
                 ; 0000 0017 int space_indicator =0;
                 ; 0000 0018 int generate=0;     // to generate feq_1
                 ; 0000 0019 char num[16];
                 ; 0000 001A int com=0;          // to generate feq_2
                 ; 0000 001B int col=0;
                 ; 0000 001C DDRC=0b00001111;   // to generate feq_3
000090 97a6      	SBIW R28,38
000091 e286      	LDI  R24,38
000092 e0a0      	LDI  R26,LOW(0)
000093 e0b0      	LDI  R27,HIGH(0)
000094 e5e4      	LDI  R30,LOW(_0x3*2)
000095 e0f0      	LDI  R31,HIGH(_0x3*2)
000096 940e 069a 	CALL __INITLOCB
                 ;	key -> R16,R17
                 ;	Nfreq -> R18,R19
                 ;	feq_1 -> Y+34
                 ;	feq_2 -> Y+30
                 ;	feq_3 -> Y+26
                 ;	num_indicator -> R20,R21
                 ;	space -> Y+24
                 ;	space_indicator -> Y+22
                 ;	generate -> Y+20
                 ;	num -> Y+4
                 ;	com -> Y+2
                 ;	col -> Y+0
                +
000098 e000     +LDI R16 , LOW ( 0 )
000099 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00009a e020     +LDI R18 , LOW ( 0 )
00009b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00009c e040     +LDI R20 , LOW ( 0 )
00009d e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00009e e0ef      	LDI  R30,LOW(15)
00009f bbe4      	OUT  0x14,R30
                 ; 0000 001D PORTC=0b00000000;
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bbe5      	OUT  0x15,R30
                 ; 0000 001E DDRD.0=0;
0000a2 9888      	CBI  0x11,0
                 ; 0000 001F PORTD.0=1;
0000a3 9a90      	SBI  0x12,0
                 ; 0000 0020 DDRB.3=1;    // OCR0
0000a4 9abb      	SBI  0x17,3
                 ; 0000 0021 DDRD.5=1;    // OCR1A
0000a5 9a8d      	SBI  0x11,5
                 ; 0000 0022 DDRD.7=1;    // OCR2
0000a6 9a8f      	SBI  0x11,7
                 ; 0000 0023 lcd_init(16);
0000a7 e1a0      	LDI  R26,LOW(16)
0000a8 940e 048a 	CALL _lcd_init
                 ; 0000 0024 lcd_gotoxy(0,0);
0000aa e0e0      	LDI  R30,LOW(0)
0000ab 93ea      	ST   -Y,R30
0000ac e0a0      	LDI  R26,LOW(0)
0000ad 940e 043a 	CALL _lcd_gotoxy
                 ; 0000 0025 lcd_putsf("Enter N of fs as");
                +
0000af e7aa     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000b0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000b1 940e 0477 	CALL _lcd_putsf
                 ; 0000 0026 lcd_gotoxy(0,1);
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 0027 lcd_putsf("follows");
                +
0000b6 e8ab     +LDI R26 , LOW ( 2 * _0x0 + ( 17 ) )
0000b7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW2FN _0x0,17
0000b8 940e 0477 	CALL _lcd_putsf
                 ; 0000 0028 delay_ms(1500);
0000ba edac      	LDI  R26,LOW(1500)
0000bb e0b5      	LDI  R27,HIGH(1500)
0000bc 940e 04bc 	CALL SUBOPT_0x1
                 ; 0000 0029 lcd_clear();
                 ; 0000 002A lcd_putsf("N/f1-f2+f3");  // to guide the user so that the inputs are correctly entered
                +
0000be e9a3     +LDI R26 , LOW ( 2 * _0x0 + ( 25 ) )
0000bf e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW2FN _0x0,25
0000c0 940e 0477 	CALL _lcd_putsf
                 ; 0000 002B delay_ms(2000);
0000c2 eda0      	LDI  R26,LOW(2000)
0000c3 e0b7      	LDI  R27,HIGH(2000)
0000c4 940e 04bc 	CALL SUBOPT_0x1
                 ; 0000 002C lcd_clear();
                 ; 0000 002D while (1)
                 _0xE:
                 ; 0000 002E     {
                 ; 0000 002F 
                 ; 0000 0030 
                 ; 0000 0031      PORTC.0=1;
0000c6 9aa8      	SBI  0x15,0
                 ; 0000 0032      if (PINC.4==1) {while(PINC.4==1){}  key=7; num_indicator =1;}
0000c7 9b9c      	SBIS 0x13,4
0000c8 c007      	RJMP _0x13
                 _0x14:
0000c9 999c      	SBIC 0x13,4
0000ca cffe      	RJMP _0x14
                +
0000cb e007     +LDI R16 , LOW ( 7 )
0000cc e010     +LDI R17 , HIGH ( 7 )
                 	__GETWRN 16,17,7
                +
0000cd e041     +LDI R20 , LOW ( 1 )
0000ce e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0033     else if (PINC.5==1) {while(PINC.5==1){}  key=8; num_indicator =1;}
0000cf c01a      	RJMP _0x17
                 _0x13:
0000d0 9b9d      	SBIS 0x13,5
0000d1 c007      	RJMP _0x18
                 _0x19:
0000d2 999d      	SBIC 0x13,5
0000d3 cffe      	RJMP _0x19
                +
0000d4 e008     +LDI R16 , LOW ( 8 )
0000d5 e010     +LDI R17 , HIGH ( 8 )
                 	__GETWRN 16,17,8
                +
0000d6 e041     +LDI R20 , LOW ( 1 )
0000d7 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0034     else if (PINC.6==1){ while(PINC.6==1){}  key=9; num_indicator =1; }
0000d8 c011      	RJMP _0x1C
                 _0x18:
0000d9 9b9e      	SBIS 0x13,6
0000da c007      	RJMP _0x1D
                 _0x1E:
0000db 999e      	SBIC 0x13,6
0000dc cffe      	RJMP _0x1E
                +
0000dd e009     +LDI R16 , LOW ( 9 )
0000de e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                +
0000df e041     +LDI R20 , LOW ( 1 )
0000e0 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0035     else if (PINC.7==1){ while(PINC.7==1){}space=1; space_indicator =1;}      // /
0000e1 c008      	RJMP _0x21
                 _0x1D:
0000e2 9b9f      	SBIS 0x13,7
0000e3 c006      	RJMP _0x22
                 _0x23:
0000e4 999f      	SBIC 0x13,7
0000e5 cffe      	RJMP _0x23
0000e6 e0e1      	LDI  R30,LOW(1)
0000e7 e0f0      	LDI  R31,HIGH(1)
0000e8 940e 04c0 	CALL SUBOPT_0x2
                 ; 0000 0036      delay_ms (10);
                 _0x22:
                 _0x21:
                 _0x1C:
                 _0x17:
0000ea 940e 04c7 	CALL SUBOPT_0x3
                 ; 0000 0037      PORTC.0=0;
0000ec 98a8      	CBI  0x15,0
                 ; 0000 0038      PORTC.1=1;
0000ed 9aa9      	SBI  0x15,1
                 ; 0000 0039     if (PINC.4==1) {while(PINC.4==1){}  key=4; num_indicator =1;}
0000ee 9b9c      	SBIS 0x13,4
0000ef c007      	RJMP _0x2A
                 _0x2B:
0000f0 999c      	SBIC 0x13,4
0000f1 cffe      	RJMP _0x2B
                +
0000f2 e004     +LDI R16 , LOW ( 4 )
0000f3 e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                +
0000f4 e041     +LDI R20 , LOW ( 1 )
0000f5 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 003A     else if (PINC.5==1) {while(PINC.5==1){}  key=5; num_indicator =1;}
0000f6 c01a      	RJMP _0x2E
                 _0x2A:
0000f7 9b9d      	SBIS 0x13,5
0000f8 c007      	RJMP _0x2F
                 _0x30:
0000f9 999d      	SBIC 0x13,5
0000fa cffe      	RJMP _0x30
                +
0000fb e005     +LDI R16 , LOW ( 5 )
0000fc e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
                +
0000fd e041     +LDI R20 , LOW ( 1 )
0000fe e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 003B     else if (PINC.6==1){ while(PINC.6==1){}  key=6; num_indicator =1;}
0000ff c011      	RJMP _0x33
                 _0x2F:
000100 9b9e      	SBIS 0x13,6
000101 c007      	RJMP _0x34
                 _0x35:
000102 999e      	SBIC 0x13,6
000103 cffe      	RJMP _0x35
                +
000104 e006     +LDI R16 , LOW ( 6 )
000105 e010     +LDI R17 , HIGH ( 6 )
                 	__GETWRN 16,17,6
                +
000106 e041     +LDI R20 , LOW ( 1 )
000107 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 003C   else if (PINC.7==1){ while(PINC.7==1){}  com=1;}
000108 c008      	RJMP _0x38
                 _0x34:
000109 9b9f      	SBIS 0x13,7
00010a c006      	RJMP _0x39
                 _0x3A:
00010b 999f      	SBIC 0x13,7
00010c cffe      	RJMP _0x3A
00010d e0e1      	LDI  R30,LOW(1)
00010e e0f0      	LDI  R31,HIGH(1)
00010f 83ea      	STD  Y+2,R30
000110 83fb      	STD  Y+2+1,R31
                 ; 0000 003D      delay_ms (10);
                 _0x39:
                 _0x38:
                 _0x33:
                 _0x2E:
000111 940e 04c7 	CALL SUBOPT_0x3
                 ; 0000 003E      PORTC.1=0;
000113 98a9      	CBI  0x15,1
                 ; 0000 003F      PORTC.2=1;
000114 9aaa      	SBI  0x15,2
                 ; 0000 0040      if (PINC.4==1) {while(PINC.4==1){}  key=1; num_indicator =1;}
000115 9b9c      	SBIS 0x13,4
000116 c007      	RJMP _0x41
                 _0x42:
000117 999c      	SBIC 0x13,4
000118 cffe      	RJMP _0x42
                +
000119 e001     +LDI R16 , LOW ( 1 )
00011a e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                +
00011b e041     +LDI R20 , LOW ( 1 )
00011c e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0041     else if (PINC.5==1) {while(PINC.5==1){}  key=2; num_indicator =1; }
00011d c01a      	RJMP _0x45
                 _0x41:
00011e 9b9d      	SBIS 0x13,5
00011f c007      	RJMP _0x46
                 _0x47:
000120 999d      	SBIC 0x13,5
000121 cffe      	RJMP _0x47
                +
000122 e002     +LDI R16 , LOW ( 2 )
000123 e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                +
000124 e041     +LDI R20 , LOW ( 1 )
000125 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0042     else if (PINC.6==1){ while(PINC.6==1){} key=3; num_indicator =1;}
000126 c011      	RJMP _0x4A
                 _0x46:
000127 9b9e      	SBIS 0x13,6
000128 c007      	RJMP _0x4B
                 _0x4C:
000129 999e      	SBIC 0x13,6
00012a cffe      	RJMP _0x4C
                +
00012b e003     +LDI R16 , LOW ( 3 )
00012c e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                +
00012d e041     +LDI R20 , LOW ( 1 )
00012e e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0043        else if (PINC.7==1){ while(PINC.7==1){} space=2;space_indicator =1;}   // -
00012f c008      	RJMP _0x4F
                 _0x4B:
000130 9b9f      	SBIS 0x13,7
000131 c006      	RJMP _0x50
                 _0x51:
000132 999f      	SBIC 0x13,7
000133 cffe      	RJMP _0x51
000134 e0e2      	LDI  R30,LOW(2)
000135 e0f0      	LDI  R31,HIGH(2)
000136 940e 04c0 	CALL SUBOPT_0x2
                 ; 0000 0044      delay_ms (10);
                 _0x50:
                 _0x4F:
                 _0x4A:
                 _0x45:
000138 940e 04c7 	CALL SUBOPT_0x3
                 ; 0000 0045      PORTC.2=0;
00013a 98aa      	CBI  0x15,2
                 ; 0000 0046      PORTC.3=1;
00013b 9aab      	SBI  0x15,3
                 ; 0000 0047      if (PINC.4==1) {while(PINC.4==1){}  col=1;}
00013c 9b9c      	SBIS 0x13,4
00013d c007      	RJMP _0x58
                 _0x59:
00013e 999c      	SBIC 0x13,4
00013f cffe      	RJMP _0x59
000140 e0e1      	LDI  R30,LOW(1)
000141 e0f0      	LDI  R31,HIGH(1)
000142 83e8      	ST   Y,R30
000143 83f9      	STD  Y+1,R31
                 ; 0000 0048     else if (PINC.5==1) {while(PINC.5==1){}  key=0; num_indicator =1;}
000144 c01a      	RJMP _0x5C
                 _0x58:
000145 9b9d      	SBIS 0x13,5
000146 c007      	RJMP _0x5D
                 _0x5E:
000147 999d      	SBIC 0x13,5
000148 cffe      	RJMP _0x5E
                +
000149 e000     +LDI R16 , LOW ( 0 )
00014a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00014b e041     +LDI R20 , LOW ( 1 )
00014c e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 0049     else if (PINC.6==1) {while(PINC.6==1){}  generate=1;}    // when = is pressed the generation process begins
00014d c011      	RJMP _0x61
                 _0x5D:
00014e 9b9e      	SBIS 0x13,6
00014f c007      	RJMP _0x62
                 _0x63:
000150 999e      	SBIC 0x13,6
000151 cffe      	RJMP _0x63
000152 e0e1      	LDI  R30,LOW(1)
000153 e0f0      	LDI  R31,HIGH(1)
000154 8bec      	STD  Y+20,R30
000155 8bfd      	STD  Y+20+1,R31
                 ; 0000 004A    else if (PINC.7==1){ while(PINC.7==1){} space=3;space_indicator=1;}        // +
000156 c008      	RJMP _0x66
                 _0x62:
000157 9b9f      	SBIS 0x13,7
000158 c006      	RJMP _0x67
                 _0x68:
000159 999f      	SBIC 0x13,7
00015a cffe      	RJMP _0x68
00015b e0e3      	LDI  R30,LOW(3)
00015c e0f0      	LDI  R31,HIGH(3)
00015d 940e 04c0 	CALL SUBOPT_0x2
                 ; 0000 004B     PORTC.3=0;
                 _0x67:
                 _0x66:
                 _0x61:
                 _0x5C:
00015f 98ab      	CBI  0x15,3
                 ; 0000 004C     delay_ms (10);
000160 940e 04c7 	CALL SUBOPT_0x3
                 ; 0000 004D      if (PIND.0==0) {while(PIND.0==0){} lcd_clear();  key=0; Nfreq=0; feq_1=0; feq_2=0; feq_3=0;space=0; space_indicator ...
000162 9980      	SBIC 0x10,0
000163 c027      	RJMP _0x6D
                 _0x6E:
000164 9b80      	SBIS 0x10,0
000165 cffe      	RJMP _0x6E
000166 940e 0447 	CALL _lcd_clear
                +
000168 e000     +LDI R16 , LOW ( 0 )
000169 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00016a e020     +LDI R18 , LOW ( 0 )
00016b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00016c 940e 04cb 	CALL SUBOPT_0x4
00016e 940e 04d1 	CALL SUBOPT_0x5
000170 e0e0      	LDI  R30,LOW(0)
                +
000171 8fea     +STD Y + 26 , R30
000172 8feb     +STD Y + 26 + 1 , R30
000173 8fec     +STD Y + 26 + 2 , R30
000174 8fed     +STD Y + 26 + 3 , R30
                 	__CLRD1S 26
000175 8fe8      	STD  Y+24,R30
000176 8fe9      	STD  Y+24+1,R30
000177 8bee      	STD  Y+22,R30
000178 8bef      	STD  Y+22+1,R30
                +
000179 e040     +LDI R20 , LOW ( 0 )
00017a e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 004E      com=0; col=0; generate=0;OCR0=0;TCCR0=0;TCCR2=0; OCR2=0; TCCR1A=0;TCCR1B=0;OCR1A=0; }
00017b 83ea      	STD  Y+2,R30
00017c 83eb      	STD  Y+2+1,R30
00017d 83e8      	STD  Y+0,R30
00017e 83e9      	STD  Y+0+1,R30
00017f 8bec      	STD  Y+20,R30
000180 8bed      	STD  Y+20+1,R30
000181 bfec      	OUT  0x3C,R30
000182 bfe3      	OUT  0x33,R30
000183 bde5      	OUT  0x25,R30
000184 bde3      	OUT  0x23,R30
000185 bdef      	OUT  0x2F,R30
000186 bdee      	OUT  0x2E,R30
000187 e0e0      	LDI  R30,LOW(0)
000188 e0f0      	LDI  R31,HIGH(0)
000189 bdfb      	OUT  0x2A+1,R31
00018a bdea      	OUT  0x2A,R30
                 ; 0000 004F       delay_ms (10);
                 _0x6D:
00018b 940e 04c7 	CALL SUBOPT_0x3
                 ; 0000 0050 
                 ; 0000 0051    if ( space==0 && num_indicator ==1){ Nfreq = Nfreq*10+key;  itoa(key,num);lcd_puts(num);num_indicator=0; }
00018d 8da8      	LDD  R26,Y+24
00018e 8db9      	LDD  R27,Y+24+1
00018f 9710      	SBIW R26,0
000190 f419      	BRNE _0x72
000191 940e 04d6 	CALL SUBOPT_0x6
000193 f009      	BREQ _0x73
                 _0x72:
000194 c00a      	RJMP _0x71
                 _0x73:
000195 01f9      	MOVW R30,R18
000196 e0aa      	LDI  R26,LOW(10)
000197 e0b0      	LDI  R27,HIGH(10)
000198 940e 0645 	CALL __MULW12
00019a 0fe0      	ADD  R30,R16
00019b 1ff1      	ADC  R31,R17
00019c 019f      	MOVW R18,R30
00019d 940e 04db 	CALL SUBOPT_0x7
                 ; 0000 0052    if  (Nfreq >3){
                 _0x71:
                +
00019f 3024     +CPI R18 , LOW ( 4 )
0001a0 e0e0     +LDI R30 , HIGH ( 4 )
0001a1 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
0001a2 f054      	BRLT _0x74
                 ; 0000 0053     lcd_putsf(" is INVALID");
                +
0001a3 e9ae     +LDI R26 , LOW ( 2 * _0x0 + ( 36 ) )
0001a4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 36 ) )
                 	__POINTW2FN _0x0,36
0001a5 940e 0477 	CALL _lcd_putsf
                 ; 0000 0054      delay_ms(1000);
0001a7 eea8      	LDI  R26,LOW(1000)
0001a8 e0b3      	LDI  R27,HIGH(1000)
0001a9 940e 04bc 	CALL SUBOPT_0x1
                 ; 0000 0055    lcd_clear();
                 ; 0000 0056     Nfreq=0;
                +
0001ab e020     +LDI R18 , LOW ( 0 )
0001ac e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0057     }
                 ; 0000 0058 
                 ; 0000 0059 
                 ; 0000 005A    if (space==1 && space_indicator==1){lcd_putchar('/'); space_indicator=0; }
                 _0x74:
0001ad 8da8      	LDD  R26,Y+24
0001ae 8db9      	LDD  R27,Y+24+1
0001af 9711      	SBIW R26,1
0001b0 f421      	BRNE _0x76
0001b1 89ae      	LDD  R26,Y+22
0001b2 89bf      	LDD  R27,Y+22+1
0001b3 9711      	SBIW R26,1
0001b4 f009      	BREQ _0x77
                 _0x76:
0001b5 c002      	RJMP _0x75
                 _0x77:
0001b6 940e 04e8 	CALL SUBOPT_0x8
                 ; 0000 005B       if (space==2 && space_indicator==1){lcd_putchar('/'); space_indicator=0; }
                 _0x75:
0001b8 8da8      	LDD  R26,Y+24
0001b9 8db9      	LDD  R27,Y+24+1
0001ba 9712      	SBIW R26,2
0001bb f421      	BRNE _0x79
0001bc 89ae      	LDD  R26,Y+22
0001bd 89bf      	LDD  R27,Y+22+1
0001be 9711      	SBIW R26,1
0001bf f009      	BREQ _0x7A
                 _0x79:
0001c0 c002      	RJMP _0x78
                 _0x7A:
0001c1 940e 04e8 	CALL SUBOPT_0x8
                 ; 0000 005C        if (space==3 && space_indicator==1){lcd_putchar('/'); space_indicator=0; }
                 _0x78:
0001c3 8da8      	LDD  R26,Y+24
0001c4 8db9      	LDD  R27,Y+24+1
0001c5 9713      	SBIW R26,3
0001c6 f421      	BRNE _0x7C
0001c7 89ae      	LDD  R26,Y+22
0001c8 89bf      	LDD  R27,Y+22+1
0001c9 9711      	SBIW R26,1
0001ca f009      	BREQ _0x7D
                 _0x7C:
0001cb c002      	RJMP _0x7B
                 _0x7D:
0001cc 940e 04e8 	CALL SUBOPT_0x8
                 ; 0000 005D if ( (Nfreq==1||Nfreq==2||Nfreq==3)&& space==1 &&num_indicator==1){
                 _0x7B:
0001ce e0e1      	LDI  R30,LOW(1)
0001cf e0f0      	LDI  R31,HIGH(1)
0001d0 17e2      	CP   R30,R18
0001d1 07f3      	CPC  R31,R19
0001d2 f041      	BREQ _0x7F
0001d3 e0e2      	LDI  R30,LOW(2)
0001d4 e0f0      	LDI  R31,HIGH(2)
0001d5 17e2      	CP   R30,R18
0001d6 07f3      	CPC  R31,R19
0001d7 f019      	BREQ _0x7F
0001d8 940e 04ef 	CALL SUBOPT_0x9
0001da f439      	BRNE _0x81
                 _0x7F:
0001db 8da8      	LDD  R26,Y+24
0001dc 8db9      	LDD  R27,Y+24+1
0001dd 9711      	SBIW R26,1
0001de f419      	BRNE _0x81
0001df 940e 04d6 	CALL SUBOPT_0x6
0001e1 f009      	BREQ _0x82
                 _0x81:
0001e2 c00a      	RJMP _0x7E
                 _0x82:
                 ; 0000 005E    feq_1=feq_1*10+key ;
0001e3 940e 04f4 	CALL SUBOPT_0xA
0001e5 940e 04f9 	CALL SUBOPT_0xB
                +
0001e7 a3ea     +STD Y + 34 , R30
0001e8 a3fb     +STD Y + 34 + 1 , R31
0001e9 a36c     +STD Y + 34 + 2 , R22
0001ea a37d     +STD Y + 34 + 3 , R23
                 	__PUTD1S 34
                 ; 0000 005F    itoa (key,num);
0001eb 940e 04db 	CALL SUBOPT_0x7
                 ; 0000 0060    lcd_puts(num);
                 ; 0000 0061    num_indicator=0;  }
                 ; 0000 0062    if ( generate==1) {
                 _0x7E:
0001ed 89ac      	LDD  R26,Y+20
0001ee 89bd      	LDD  R27,Y+20+1
0001ef 9711      	SBIW R26,1
0001f0 f009      	BREQ PC+2
0001f1 c07c      	RJMP _0x83
                 ; 0000 0063    if(feq_1<=4000000&&feq_1>15625){
0001f2 940e 0507 	CALL SUBOPT_0xC
0001f4 940e 050c 	CALL SUBOPT_0xD
0001f6 f41c      	BRGE _0x85
0001f7 940e 0514 	CALL SUBOPT_0xE
0001f9 f40c      	BRGE _0x86
                 _0x85:
0001fa c009      	RJMP _0x84
                 _0x86:
                 ; 0000 0064    TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
0001fb e1e9      	LDI  R30,LOW(25)
0001fc 940e 051d 	CALL SUBOPT_0xF
                 ; 0000 0065 TCNT0=0x00;
                 ; 0000 0066 OCR0 =(8000000/(2*1*feq_1))-1;
0001fe 940e 0521 	CALL SUBOPT_0x10
000200 bfec      	OUT  0x3C,R30
                 ; 0000 0067   itoa (OCR0,num);
000201 b7ec      	IN   R30,0x3C
000202 e0f0      	LDI  R31,0
000203 c060      	RJMP _0xCC
                 ; 0000 0068     feq_1=0;
                 ; 0000 0069     lcd_gotoxy(0,1);
                 ; 0000 006A    lcd_puts(num);}
                 ; 0000 006B    else if(feq_1<=500000&&feq_1>=1953){
                 _0x84:
000204 940e 0507 	CALL SUBOPT_0xC
000206 940e 052b 	CALL SUBOPT_0x11
000208 f42c      	BRGE _0x89
000209 940e 0507 	CALL SUBOPT_0xC
00020b 940e 0533 	CALL SUBOPT_0x12
00020d f40c      	BRGE _0x8A
                 _0x89:
00020e c009      	RJMP _0x88
                 _0x8A:
                 ; 0000 006C    TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
00020f e1ea      	LDI  R30,LOW(26)
000210 940e 051d 	CALL SUBOPT_0xF
                 ; 0000 006D TCNT0=0x00;
                 ; 0000 006E OCR0 =(8000000/(2*8*feq_1))-1;
000212 940e 053b 	CALL SUBOPT_0x13
000214 bfec      	OUT  0x3C,R30
                 ; 0000 006F   itoa (OCR0,num);
000215 b7ec      	IN   R30,0x3C
000216 e0f0      	LDI  R31,0
000217 c04c      	RJMP _0xCC
                 ; 0000 0070     feq_1=0;
                 ; 0000 0071     lcd_gotoxy(0,1);
                 ; 0000 0072    lcd_puts(num);}
                 ; 0000 0073     else if(feq_1<=62500&&feq_1>=244){
                 _0x88:
000218 940e 0507 	CALL SUBOPT_0xC
00021a 940e 0549 	CALL SUBOPT_0x14
00021c f42c      	BRGE _0x8D
00021d 940e 0507 	CALL SUBOPT_0xC
00021f 940e 0551 	CALL SUBOPT_0x15
000221 f40c      	BRGE _0x8E
                 _0x8D:
000222 c009      	RJMP _0x8C
                 _0x8E:
                 ; 0000 0074    TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000223 e1eb      	LDI  R30,LOW(27)
000224 940e 051d 	CALL SUBOPT_0xF
                 ; 0000 0075 TCNT0=0x00;
                 ; 0000 0076 OCR0 =(8000000/(2*64*feq_1))-1;
000226 940e 0559 	CALL SUBOPT_0x16
000228 bfec      	OUT  0x3C,R30
                 ; 0000 0077   itoa (OCR0,num);
000229 b7ec      	IN   R30,0x3C
00022a e0f0      	LDI  R31,0
00022b c038      	RJMP _0xCC
                 ; 0000 0078     feq_1=0;
                 ; 0000 0079     lcd_gotoxy(0,1);
                 ; 0000 007A    lcd_puts(num);}
                 ; 0000 007B 
                 ; 0000 007C    else if(feq_1<=15625&&feq_1>=61){
                 _0x8C:
00022c 940e 0514 	CALL SUBOPT_0xE
00022e f42c      	BRGE _0x91
00022f 940e 0507 	CALL SUBOPT_0xC
000231 940e 0567 	CALL SUBOPT_0x17
000233 f40c      	BRGE _0x92
                 _0x91:
000234 c009      	RJMP _0x90
                 _0x92:
                 ; 0000 007D TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000235 e1ec      	LDI  R30,LOW(28)
000236 940e 051d 	CALL SUBOPT_0xF
                 ; 0000 007E TCNT0=0x00;
                 ; 0000 007F OCR0 =(8000000/(2*256*feq_1))-1;
000238 940e 056f 	CALL SUBOPT_0x18
00023a bfec      	OUT  0x3C,R30
                 ; 0000 0080   itoa (OCR0,num);
00023b b7ec      	IN   R30,0x3C
00023c e0f0      	LDI  R31,0
00023d c026      	RJMP _0xCC
                 ; 0000 0081     feq_1=0;
                 ; 0000 0082     lcd_gotoxy(0,1);
                 ; 0000 0083    lcd_puts(num);}
                 ; 0000 0084     else if(feq_1<=3906&&feq_1>=15){
                 _0x90:
00023e 940e 0507 	CALL SUBOPT_0xC
000240 940e 057d 	CALL SUBOPT_0x19
000242 f41c      	BRGE _0x95
000243 940e 0585 	CALL SUBOPT_0x1A
000245 f40c      	BRGE _0x96
                 _0x95:
000246 c00a      	RJMP _0x94
                 _0x96:
                 ; 0000 0085 TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
000247 e1ed      	LDI  R30,LOW(29)
000248 940e 051d 	CALL SUBOPT_0xF
                 ; 0000 0086 TCNT0=0x00;
                 ; 0000 0087 OCR0 =(8000000/(2*1024*feq_1))-1;
00024a 940e 058e 	CALL SUBOPT_0x1B
00024c 50e1      	SUBI R30,LOW(1)
00024d bfec      	OUT  0x3C,R30
                 ; 0000 0088   itoa (OCR0,num);
00024e b7ec      	IN   R30,0x3C
00024f e0f0      	LDI  R31,0
000250 c013      	RJMP _0xCC
                 ; 0000 0089     feq_1=0;
                 ; 0000 008A     lcd_gotoxy(0,1);
                 ; 0000 008B    lcd_puts(num);}
                 ; 0000 008C         else if(feq_1<15&&feq_1>=1){
                 _0x94:
000251 940e 0585 	CALL SUBOPT_0x1A
000253 f42c      	BRGE _0x99
000254 940e 0507 	CALL SUBOPT_0xC
000256 940e 059b 	CALL SUBOPT_0x1C
000258 f40c      	BRGE _0x9A
                 _0x99:
000259 c014      	RJMP _0x98
                 _0x9A:
                 ; 0000 008D TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00025a e4e0      	LDI  R30,LOW(64)
00025b bdef      	OUT  0x2F,R30
                 ; 0000 008E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
00025c e0ed      	LDI  R30,LOW(13)
00025d bdee      	OUT  0x2E,R30
                 ; 0000 008F     OCR1A=(8000000/(2*1024*feq_1)-1);
00025e 940e 04f4 	CALL SUBOPT_0xA
000260 940e 058e 	CALL SUBOPT_0x1B
000262 940e 05a3 	CALL SUBOPT_0x1D
                 ; 0000 0090   itoa (OCR1A,num);
                 ; 0000 0091   itoa (OCR1A,num);
                 _0xCC:
000264 93fa      	ST   -Y,R31
000265 93ea      	ST   -Y,R30
000266 940e 05b1 	CALL SUBOPT_0x1E
                 ; 0000 0092     feq_1=0;
000268 940e 04cb 	CALL SUBOPT_0x4
                 ; 0000 0093     lcd_gotoxy(0,1);
00026a 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 0094    lcd_puts(num);}
00026c 940e 05b5 	CALL SUBOPT_0x1F
                 ; 0000 0095 
                 ; 0000 0096     }
                 _0x98:
                 ; 0000 0097 
                 ; 0000 0098   generate=0;
                 _0x83:
00026e e0e0      	LDI  R30,LOW(0)
00026f 8bec      	STD  Y+20,R30
000270 8bed      	STD  Y+20+1,R30
                 ; 0000 0099 
                 ; 0000 009A   if ((Nfreq==2||Nfreq==3 )&& space==2 &&num_indicator==1){
000271 e0e2      	LDI  R30,LOW(2)
000272 e0f0      	LDI  R31,HIGH(2)
000273 17e2      	CP   R30,R18
000274 07f3      	CPC  R31,R19
000275 f019      	BREQ _0x9C
000276 940e 04ef 	CALL SUBOPT_0x9
000278 f439      	BRNE _0x9E
                 _0x9C:
000279 8da8      	LDD  R26,Y+24
00027a 8db9      	LDD  R27,Y+24+1
00027b 9712      	SBIW R26,2
00027c f419      	BRNE _0x9E
00027d 940e 04d6 	CALL SUBOPT_0x6
00027f f009      	BREQ _0x9F
                 _0x9E:
000280 c00a      	RJMP _0x9B
                 _0x9F:
                 ; 0000 009B    feq_2=feq_2*10+key ;
000281 940e 05b9 	CALL SUBOPT_0x20
000283 940e 04f9 	CALL SUBOPT_0xB
                +
000285 8fee     +STD Y + 30 , R30
000286 8fff     +STD Y + 30 + 1 , R31
000287 a368     +STD Y + 30 + 2 , R22
000288 a379     +STD Y + 30 + 3 , R23
                 	__PUTD1S 30
                 ; 0000 009C    itoa (key,num);
000289 940e 04db 	CALL SUBOPT_0x7
                 ; 0000 009D    lcd_puts(num);
                 ; 0000 009E    num_indicator=0;  }
                 ; 0000 009F   if (com==1){
                 _0x9B:
00028b 81aa      	LDD  R26,Y+2
00028c 81bb      	LDD  R27,Y+2+1
00028d 9711      	SBIW R26,1
00028e f009      	BREQ PC+2
00028f c0a9      	RJMP _0xA0
                 ; 0000 00A0    if(feq_2<=4000000&&feq_2>=15625){
000290 940e 05be 	CALL SUBOPT_0x21
000292 940e 050c 	CALL SUBOPT_0xD
000294 f42c      	BRGE _0xA2
000295 940e 05be 	CALL SUBOPT_0x21
000297 940e 05c3 	CALL SUBOPT_0x22
000299 f40c      	BRGE _0xA3
                 _0xA2:
00029a c00f      	RJMP _0xA1
                 _0xA3:
                 ; 0000 00A1 TCCR2=(0<<PWM2) | (0<<COM21) | (1<<COM20) | (1<<CTC2) | (0<<CS22) | (0<<CS21) | (1<<CS20);
00029b e1e9      	LDI  R30,LOW(25)
00029c 940e 05cb 	CALL SUBOPT_0x23
                 ; 0000 00A2 TCNT2=0x00;
                 ; 0000 00A3 OCR2 =(8000000/(2*1*feq_2))-1;
00029e 940e 0521 	CALL SUBOPT_0x10
0002a0 940e 05cf 	CALL SUBOPT_0x24
                 ; 0000 00A4   itoa (OCR2,num);
                 ; 0000 00A5  lcd_gotoxy(5,1);
0002a2 e0e5      	LDI  R30,LOW(5)
0002a3 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 00A6 
                 ; 0000 00A7    lcd_puts(num);
0002a5 940e 05b5 	CALL SUBOPT_0x1F
                 ; 0000 00A8 
                 ; 0000 00A9   feq_2=0;
0002a7 e0e0      	LDI  R30,LOW(0)
0002a8 940e 04d1 	CALL SUBOPT_0x5
                 ; 0000 00AA 
                 ; 0000 00AB    }
                 ; 0000 00AC    if(feq_2<=500000&&feq_2>=1953){
                 _0xA1:
0002aa 940e 05be 	CALL SUBOPT_0x21
0002ac 940e 052b 	CALL SUBOPT_0x11
0002ae f42c      	BRGE _0xA5
0002af 940e 05be 	CALL SUBOPT_0x21
0002b1 940e 0533 	CALL SUBOPT_0x12
0002b3 f40c      	BRGE _0xA6
                 _0xA5:
0002b4 c00f      	RJMP _0xA4
                 _0xA6:
                 ; 0000 00AD 
                 ; 0000 00AE TCCR2=(0<<PWM2) | (0<<COM21) | (1<<COM20) | (1<<CTC2) | (0<<CS22) | (1<<CS21) | (0<<CS20);
0002b5 e1ea      	LDI  R30,LOW(26)
0002b6 940e 05cb 	CALL SUBOPT_0x23
                 ; 0000 00AF TCNT2=0x00;
                 ; 0000 00B0 OCR2 =(8000000/(2*8*feq_2))-1;
0002b8 940e 053b 	CALL SUBOPT_0x13
0002ba 940e 05cf 	CALL SUBOPT_0x24
                 ; 0000 00B1   itoa (OCR2,num);
                 ; 0000 00B2  lcd_gotoxy(5,1);
0002bc e0e5      	LDI  R30,LOW(5)
0002bd 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 00B3 
                 ; 0000 00B4    lcd_puts(num);
0002bf 940e 05b5 	CALL SUBOPT_0x1F
                 ; 0000 00B5 
                 ; 0000 00B6   feq_2=0;
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 940e 04d1 	CALL SUBOPT_0x5
                 ; 0000 00B7 
                 ; 0000 00B8    }
                 ; 0000 00B9       if(feq_2<=62500&&feq_2>=244){
                 _0xA4:
0002c4 940e 05be 	CALL SUBOPT_0x21
0002c6 940e 0549 	CALL SUBOPT_0x14
0002c8 f42c      	BRGE _0xA8
0002c9 940e 05be 	CALL SUBOPT_0x21
0002cb 940e 0551 	CALL SUBOPT_0x15
0002cd f40c      	BRGE _0xA9
                 _0xA8:
0002ce c00f      	RJMP _0xA7
                 _0xA9:
                 ; 0000 00BA TCCR2=(0<<PWM2) | (0<<COM21) | (1<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
0002cf e1ec      	LDI  R30,LOW(28)
0002d0 940e 05cb 	CALL SUBOPT_0x23
                 ; 0000 00BB TCNT2=0x00;
                 ; 0000 00BC OCR2 =(8000000/(2*64*feq_2))-1;
0002d2 940e 0559 	CALL SUBOPT_0x16
0002d4 940e 05cf 	CALL SUBOPT_0x24
                 ; 0000 00BD   itoa (OCR2,num);
                 ; 0000 00BE   lcd_gotoxy(5,1);
0002d6 e0e5      	LDI  R30,LOW(5)
0002d7 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 00BF 
                 ; 0000 00C0    lcd_puts(num);
0002d9 940e 05b5 	CALL SUBOPT_0x1F
                 ; 0000 00C1 
                 ; 0000 00C2   feq_2=0;
0002db e0e0      	LDI  R30,LOW(0)
0002dc 940e 04d1 	CALL SUBOPT_0x5
                 ; 0000 00C3 
                 ; 0000 00C4    }
                 ; 0000 00C5        if(feq_2<=15625&&feq_2>=61){
                 _0xA7:
0002de 940e 05be 	CALL SUBOPT_0x21
                +
0002e0 30aa     +CPI R26 , LOW ( 0x3D0A )
0002e1 e3ed     +LDI R30 , HIGH ( 0x3D0A )
0002e2 07be     +CPC R27 , R30
0002e3 e0e0     +LDI R30 , BYTE3 ( 0x3D0A )
0002e4 078e     +CPC R24 , R30
0002e5 e0e0     +LDI R30 , BYTE4 ( 0x3D0A )
0002e6 079e     +CPC R25 , R30
                 	__CPD2N 0x3D0A
0002e7 f42c      	BRGE _0xAB
0002e8 940e 05be 	CALL SUBOPT_0x21
0002ea 940e 0567 	CALL SUBOPT_0x17
0002ec f40c      	BRGE _0xAC
                 _0xAB:
0002ed c00f      	RJMP _0xAA
                 _0xAC:
                 ; 0000 00C6 
                 ; 0000 00C7 
                 ; 0000 00C8 TCCR2=(0<<PWM2) | (0<<COM21) | (1<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (0<<CS20);
0002ee e1ee      	LDI  R30,LOW(30)
0002ef 940e 05cb 	CALL SUBOPT_0x23
                 ; 0000 00C9 TCNT2=0x00;
                 ; 0000 00CA OCR2 =(8000000/(2*256*feq_2))-1;
0002f1 940e 056f 	CALL SUBOPT_0x18
0002f3 940e 05cf 	CALL SUBOPT_0x24
                 ; 0000 00CB   itoa (OCR2,num);
                 ; 0000 00CC  lcd_gotoxy(5,1);
0002f5 e0e5      	LDI  R30,LOW(5)
0002f6 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 00CD 
                 ; 0000 00CE    lcd_puts(num);
0002f8 940e 05b5 	CALL SUBOPT_0x1F
                 ; 0000 00CF 
                 ; 0000 00D0   feq_2=0;
0002fa e0e0      	LDI  R30,LOW(0)
0002fb 940e 04d1 	CALL SUBOPT_0x5
                 ; 0000 00D1 
                 ; 0000 00D2    }
                 ; 0000 00D3        if(feq_2<=3906&&feq_2>=15){
                 _0xAA:
0002fd 940e 05be 	CALL SUBOPT_0x21
0002ff 940e 057d 	CALL SUBOPT_0x19
000301 f41c      	BRGE _0xAE
000302 940e 05d5 	CALL SUBOPT_0x25
000304 f40c      	BRGE _0xAF
                 _0xAE:
000305 c011      	RJMP _0xAD
                 _0xAF:
                 ; 0000 00D4 
                 ; 0000 00D5 TCCR2=(0<<PWM2) | (0<<COM21) | (1<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
000306 e1ef      	LDI  R30,LOW(31)
000307 940e 05cb 	CALL SUBOPT_0x23
                 ; 0000 00D6 TCNT2=0x00;
                 ; 0000 00D7 OCR2 =(8000000/(2*1024*feq_2))-1;
000309 940e 058e 	CALL SUBOPT_0x1B
00030b 50e1      	SUBI R30,LOW(1)
00030c 940e 05cf 	CALL SUBOPT_0x24
                 ; 0000 00D8   itoa (OCR2,num);
                 ; 0000 00D9  lcd_gotoxy(5,1);
00030e e0e5      	LDI  R30,LOW(5)
00030f 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 00DA 
                 ; 0000 00DB    lcd_puts(num);
000311 940e 05b5 	CALL SUBOPT_0x1F
                 ; 0000 00DC 
                 ; 0000 00DD   feq_2=0;
000313 e0e0      	LDI  R30,LOW(0)
000314 940e 04d1 	CALL SUBOPT_0x5
                 ; 0000 00DE 
                 ; 0000 00DF    }
                 ; 0000 00E0            else if(feq_2<15&&feq_2>=1){
000316 c01f      	RJMP _0xB0
                 _0xAD:
000317 940e 05d5 	CALL SUBOPT_0x25
000319 f42c      	BRGE _0xB2
00031a 940e 05be 	CALL SUBOPT_0x21
00031c 940e 059b 	CALL SUBOPT_0x1C
00031e f40c      	BRGE _0xB3
                 _0xB2:
00031f c016      	RJMP _0xB1
                 _0xB3:
                 ; 0000 00E1 TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000320 e5e0      	LDI  R30,LOW(80)
000321 bdef      	OUT  0x2F,R30
                 ; 0000 00E2 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
000322 e0ed      	LDI  R30,LOW(13)
000323 bdee      	OUT  0x2E,R30
                 ; 0000 00E3     OCR1A=(8000000/(2*1024*feq_2)-1);
000324 940e 05b9 	CALL SUBOPT_0x20
000326 940e 058e 	CALL SUBOPT_0x1B
000328 940e 05a3 	CALL SUBOPT_0x1D
                 ; 0000 00E4 
                 ; 0000 00E5   itoa (OCR1A,num);
                 ; 0000 00E6   itoa (OCR1A,num);
00032a 93fa      	ST   -Y,R31
00032b 93ea      	ST   -Y,R30
00032c 940e 05b1 	CALL SUBOPT_0x1E
                 ; 0000 00E7     feq_2=0;
00032e e0e0      	LDI  R30,LOW(0)
00032f 940e 04d1 	CALL SUBOPT_0x5
                 ; 0000 00E8     lcd_gotoxy(5,1);
000331 e0e5      	LDI  R30,LOW(5)
000332 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 00E9    lcd_puts(num);}
000334 940e 05b5 	CALL SUBOPT_0x1F
                 ; 0000 00EA 
                 ; 0000 00EB 
                 ; 0000 00EC 
                 ; 0000 00ED       com =0;
                 _0xB1:
                 _0xB0:
000336 e0e0      	LDI  R30,LOW(0)
000337 83ea      	STD  Y+2,R30
000338 83eb      	STD  Y+2+1,R30
                 ; 0000 00EE }
                 ; 0000 00EF 
                 ; 0000 00F0   if ((Nfreq==3 )&& space==3 &&num_indicator==1){
                 _0xA0:
000339 940e 04ef 	CALL SUBOPT_0x9
00033b f439      	BRNE _0xB5
00033c 8da8      	LDD  R26,Y+24
00033d 8db9      	LDD  R27,Y+24+1
00033e 9713      	SBIW R26,3
00033f f419      	BRNE _0xB5
000340 940e 04d6 	CALL SUBOPT_0x6
000342 f009      	BREQ _0xB6
                 _0xB5:
000343 c00a      	RJMP _0xB4
                 _0xB6:
                 ; 0000 00F1    feq_3=feq_3*10+key ;
000344 940e 05de 	CALL SUBOPT_0x26
000346 940e 04f9 	CALL SUBOPT_0xB
                +
000348 8fea     +STD Y + 26 , R30
000349 8ffb     +STD Y + 26 + 1 , R31
00034a 8f6c     +STD Y + 26 + 2 , R22
00034b 8f7d     +STD Y + 26 + 3 , R23
                 	__PUTD1S 26
                 ; 0000 00F2    itoa (key,num);
00034c 940e 04db 	CALL SUBOPT_0x7
                 ; 0000 00F3    lcd_puts(num);
                 ; 0000 00F4    num_indicator=0;  }
                 ; 0000 00F5      if (col==1){
                 _0xB4:
00034e 81a8      	LD   R26,Y
00034f 81b9      	LDD  R27,Y+1
000350 9711      	SBIW R26,1
000351 f009      	BREQ PC+2
000352 c097      	RJMP _0xB7
                 ; 0000 00F6    if(feq_3<4000000 && feq_3>=61){
000353 940e 05e3 	CALL SUBOPT_0x27
                +
000355 30a0     +CPI R26 , LOW ( 0x3D0900 )
000356 e0e9     +LDI R30 , HIGH ( 0x3D0900 )
000357 07be     +CPC R27 , R30
000358 e3ed     +LDI R30 , BYTE3 ( 0x3D0900 )
000359 078e     +CPC R24 , R30
00035a e0e0     +LDI R30 , BYTE4 ( 0x3D0900 )
00035b 079e     +CPC R25 , R30
                 	__CPD2N 0x3D0900
00035c f42c      	BRGE _0xB9
00035d 940e 05e3 	CALL SUBOPT_0x27
00035f 940e 0567 	CALL SUBOPT_0x17
000361 f40c      	BRGE _0xBA
                 _0xB9:
000362 c009      	RJMP _0xB8
                 _0xBA:
                 ; 0000 00F7 TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000363 e5e0      	LDI  R30,LOW(80)
000364 bdef      	OUT  0x2F,R30
                 ; 0000 00F8 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000365 e0e9      	LDI  R30,LOW(9)
000366 bdee      	OUT  0x2E,R30
                 ; 0000 00F9     OCR1A=(8000000/(2*1*feq_3)-1);
000367 940e 05de 	CALL SUBOPT_0x26
000369 940e 0613 	CALL __LSLD1
00036b c062      	RJMP _0xCD
                 ; 0000 00FA   itoa (OCR1A,num);
                 ; 0000 00FB  lcd_gotoxy(10,1);
                 ; 0000 00FC 
                 ; 0000 00FD    lcd_puts(num);
                 ; 0000 00FE 
                 ; 0000 00FF   feq_3=0;
                 ; 0000 0100 
                 ; 0000 0101    }
                 ; 0000 0102    else if(feq_3<500000&&feq_3>=7){
                 _0xB8:
00036c 940e 05e3 	CALL SUBOPT_0x27
                +
00036e 32a0     +CPI R26 , LOW ( 0x7A120 )
00036f eae1     +LDI R30 , HIGH ( 0x7A120 )
000370 07be     +CPC R27 , R30
000371 e0e7     +LDI R30 , BYTE3 ( 0x7A120 )
000372 078e     +CPC R24 , R30
000373 e0e0     +LDI R30 , BYTE4 ( 0x7A120 )
000374 079e     +CPC R25 , R30
                 	__CPD2N 0x7A120
000375 f454      	BRGE _0xBD
000376 940e 05e3 	CALL SUBOPT_0x27
                +
000378 30a7     +CPI R26 , LOW ( 0x7 )
000379 e0e0     +LDI R30 , HIGH ( 0x7 )
00037a 07be     +CPC R27 , R30
00037b e0e0     +LDI R30 , BYTE3 ( 0x7 )
00037c 078e     +CPC R24 , R30
00037d e0e0     +LDI R30 , BYTE4 ( 0x7 )
00037e 079e     +CPC R25 , R30
                 	__CPD2N 0x7
00037f f40c      	BRGE _0xBE
                 _0xBD:
000380 c00b      	RJMP _0xBC
                 _0xBE:
                 ; 0000 0103 TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000381 e4e0      	LDI  R30,LOW(64)
000382 bdef      	OUT  0x2F,R30
                 ; 0000 0104 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
000383 e0ea      	LDI  R30,LOW(10)
000384 bdee      	OUT  0x2E,R30
                 ; 0000 0105     OCR1A=(8000000/(2*8*feq_3)-1);
000385 940e 05de 	CALL SUBOPT_0x26
                +
000387 e1a0     +LDI R26 , LOW ( 0x10 )
000388 e0b0     +LDI R27 , HIGH ( 0x10 )
000389 e080     +LDI R24 , BYTE3 ( 0x10 )
00038a e090     +LDI R25 , BYTE4 ( 0x10 )
                 	__GETD2N 0x10
00038b c040      	RJMP _0xCE
                 ; 0000 0106   itoa (OCR1A,num);
                 ; 0000 0107  lcd_gotoxy(10,1);
                 ; 0000 0108 
                 ; 0000 0109    lcd_puts(num);
                 ; 0000 010A 
                 ; 0000 010B   feq_3=0;
                 ; 0000 010C 
                 ; 0000 010D    }
                 ; 0000 010E       else if(feq_3<62500&&feq_3>=1){
                 _0xBC:
00038c 940e 05e3 	CALL SUBOPT_0x27
                +
00038e 32a4     +CPI R26 , LOW ( 0xF424 )
00038f efe4     +LDI R30 , HIGH ( 0xF424 )
000390 07be     +CPC R27 , R30
000391 e0e0     +LDI R30 , BYTE3 ( 0xF424 )
000392 078e     +CPC R24 , R30
000393 e0e0     +LDI R30 , BYTE4 ( 0xF424 )
000394 079e     +CPC R25 , R30
                 	__CPD2N 0xF424
000395 f41c      	BRGE _0xC1
000396 940e 05e8 	CALL SUBOPT_0x28
000398 f40c      	BRGE _0xC2
                 _0xC1:
000399 c00b      	RJMP _0xC0
                 _0xC2:
                 ; 0000 010F TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00039a e4e0      	LDI  R30,LOW(64)
00039b bdef      	OUT  0x2F,R30
                 ; 0000 0110 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
00039c e0eb      	LDI  R30,LOW(11)
00039d bdee      	OUT  0x2E,R30
                 ; 0000 0111     OCR1A=(8000000/(2*64*feq_3)-1);
00039e 940e 05de 	CALL SUBOPT_0x26
                +
0003a0 e8a0     +LDI R26 , LOW ( 0x80 )
0003a1 e0b0     +LDI R27 , HIGH ( 0x80 )
0003a2 e080     +LDI R24 , BYTE3 ( 0x80 )
0003a3 e090     +LDI R25 , BYTE4 ( 0x80 )
                 	__GETD2N 0x80
0003a4 c027      	RJMP _0xCE
                 ; 0000 0112   itoa (OCR1A,num);
                 ; 0000 0113  lcd_gotoxy(10,1);
                 ; 0000 0114 
                 ; 0000 0115    lcd_puts(num);
                 ; 0000 0116 
                 ; 0000 0117   feq_3=0;
                 ; 0000 0118 
                 ; 0000 0119    }
                 ; 0000 011A         else if(feq_3<15625&&feq_3>=1){
                 _0xC0:
0003a5 940e 05e3 	CALL SUBOPT_0x27
0003a7 940e 05c3 	CALL SUBOPT_0x22
0003a9 f41c      	BRGE _0xC5
0003aa 940e 05e8 	CALL SUBOPT_0x28
0003ac f40c      	BRGE _0xC6
                 _0xC5:
0003ad c00b      	RJMP _0xC4
                 _0xC6:
                 ; 0000 011B TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0003ae e4e0      	LDI  R30,LOW(64)
0003af bdef      	OUT  0x2F,R30
                 ; 0000 011C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0003b0 e0ec      	LDI  R30,LOW(12)
0003b1 bdee      	OUT  0x2E,R30
                 ; 0000 011D     OCR1A=(8000000/(2*256*feq_3)-1);
0003b2 940e 05de 	CALL SUBOPT_0x26
                +
0003b4 e0a0     +LDI R26 , LOW ( 0x200 )
0003b5 e0b2     +LDI R27 , HIGH ( 0x200 )
0003b6 e080     +LDI R24 , BYTE3 ( 0x200 )
0003b7 e090     +LDI R25 , BYTE4 ( 0x200 )
                 	__GETD2N 0x200
0003b8 c013      	RJMP _0xCE
                 ; 0000 011E   itoa (OCR1A,num);
                 ; 0000 011F  lcd_gotoxy(10,1);
                 ; 0000 0120 
                 ; 0000 0121    lcd_puts(num);
                 ; 0000 0122 
                 ; 0000 0123   feq_3=0;
                 ; 0000 0124 
                 ; 0000 0125    }
                 ; 0000 0126          else if(feq_3<=3906&&feq_3>=1){
                 _0xC4:
0003b9 940e 05e3 	CALL SUBOPT_0x27
0003bb 940e 057d 	CALL SUBOPT_0x19
0003bd f41c      	BRGE _0xC9
0003be 940e 05e8 	CALL SUBOPT_0x28
0003c0 f40c      	BRGE _0xCA
                 _0xC9:
0003c1 c025      	RJMP _0xC8
                 _0xCA:
                 ; 0000 0127 TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0003c2 e4e0      	LDI  R30,LOW(64)
0003c3 bdef      	OUT  0x2F,R30
                 ; 0000 0128 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
0003c4 e0ed      	LDI  R30,LOW(13)
0003c5 bdee      	OUT  0x2E,R30
                 ; 0000 0129     OCR1A=(8000000/(2*1024*feq_3)-1);
0003c6 940e 05de 	CALL SUBOPT_0x26
                +
0003c8 e0a0     +LDI R26 , LOW ( 0x800 )
0003c9 e0b8     +LDI R27 , HIGH ( 0x800 )
0003ca e080     +LDI R24 , BYTE3 ( 0x800 )
0003cb e090     +LDI R25 , BYTE4 ( 0x800 )
                 	__GETD2N 0x800
                 _0xCE:
0003cc 940e 064a 	CALL __MULD12
                 _0xCD:
                +
0003ce e0a0     +LDI R26 , LOW ( 0x7A1200 )
0003cf e1b2     +LDI R27 , HIGH ( 0x7A1200 )
0003d0 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
0003d1 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
0003d2 940e 0674 	CALL __DIVD21
0003d4 9731      	SBIW R30,1
0003d5 bdfb      	OUT  0x2A+1,R31
0003d6 bdea      	OUT  0x2A,R30
                 ; 0000 012A   itoa (OCR1A,num);
0003d7 b5ea      	IN   R30,0x2A
0003d8 b5fb      	IN   R31,0x2A+1
0003d9 93fa      	ST   -Y,R31
0003da 93ea      	ST   -Y,R30
0003db 940e 05b1 	CALL SUBOPT_0x1E
                 ; 0000 012B  lcd_gotoxy(10,1);
0003dd e0ea      	LDI  R30,LOW(10)
0003de 940e 04b8 	CALL SUBOPT_0x0
                 ; 0000 012C 
                 ; 0000 012D    lcd_puts(num);
0003e0 940e 05b5 	CALL SUBOPT_0x1F
                 ; 0000 012E 
                 ; 0000 012F   feq_3=0;
0003e2 e0e0      	LDI  R30,LOW(0)
                +
0003e3 8fea     +STD Y + 26 , R30
0003e4 8feb     +STD Y + 26 + 1 , R30
0003e5 8fec     +STD Y + 26 + 2 , R30
0003e6 8fed     +STD Y + 26 + 3 , R30
                 	__CLRD1S 26
                 ; 0000 0130 
                 ; 0000 0131    }
                 ; 0000 0132   col=0;
                 _0xC8:
0003e7 e0e0      	LDI  R30,LOW(0)
0003e8 83e8      	STD  Y+0,R30
0003e9 83e9      	STD  Y+0+1,R30
                 ; 0000 0133         }
                 ; 0000 0134 
                 ; 0000 0135  }
                 _0xB7:
0003ea ccdb      	RJMP _0xE
                 ; 0000 0136 }
                 _0xCB:
0003eb cfff      	RJMP _0xCB
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0003ec 93ba      	ST   -Y,R27
0003ed 93aa      	ST   -Y,R26
0003ee 91a9          ld   r26,y+
0003ef 91b9          ld   r27,y+
0003f0 91e9          ld   r30,y+
0003f1 91f9          ld   r31,y+
0003f2 9630          adiw r30,0
0003f3 f42a          brpl __itoa0
0003f4 95e0          com  r30
0003f5 95f0          com  r31
0003f6 9631          adiw r30,1
0003f7 e26d          ldi  r22,'-'
0003f8 936d          st   x+,r22
                 __itoa0:
0003f9 94e8          clt
0003fa e180          ldi  r24,low(10000)
0003fb e297          ldi  r25,high(10000)
0003fc d00d          rcall __itoa1
0003fd ee88          ldi  r24,low(1000)
0003fe e093          ldi  r25,high(1000)
0003ff d00a          rcall __itoa1
000400 e684          ldi  r24,100
000401 2799          clr  r25
000402 d007          rcall __itoa1
000403 e08a          ldi  r24,10
000404 d005          rcall __itoa1
000405 2f6e          mov  r22,r30
000406 d010          rcall __itoa5
000407 2766          clr  r22
000408 936c          st   x,r22
000409 9508          ret
                 
                 __itoa1:
00040a 2766          clr	 r22
                 __itoa2:
00040b 17e8          cp   r30,r24
00040c 07f9          cpc  r31,r25
00040d f020          brlo __itoa3
00040e 9563          inc  r22
00040f 1be8          sub  r30,r24
000410 0bf9          sbc  r31,r25
000411 f7c9          brne __itoa2
                 __itoa3:
000412 2366          tst  r22
000413 f411          brne __itoa4
000414 f016          brts __itoa5
000415 9508          ret
                 __itoa4:
000416 9468          set
                 __itoa5:
000417 5d60          subi r22,-0x30
000418 936d          st   x+,r22
000419 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00041a 93aa      	ST   -Y,R26
00041b b3eb      	IN   R30,0x1B
00041c 70ef      	ANDI R30,LOW(0xF)
00041d 2fae      	MOV  R26,R30
00041e 81e8      	LD   R30,Y
00041f 7fe0      	ANDI R30,LOW(0xF0)
000420 2bea      	OR   R30,R26
000421 bbeb      	OUT  0x1B,R30
                +
000422 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000423 958a     +DEC R24
000424 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000425 9ada      	SBI  0x1B,2
                +
000426 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000427 958a     +DEC R24
000428 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000429 98da      	CBI  0x1B,2
                +
00042a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00042b 958a     +DEC R24
00042c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00042d c088      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00042e 93aa      	ST   -Y,R26
00042f 81a8      	LD   R26,Y
000430 dfe9      	RCALL __lcd_write_nibble_G101
000431 81e8          ld    r30,y
000432 95e2          swap  r30
000433 83e8          st    y,r30
000434 81a8      	LD   R26,Y
000435 dfe4      	RCALL __lcd_write_nibble_G101
                +
000436 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000437 958a     +DEC R24
000438 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000439 c07c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00043a 93aa      	ST   -Y,R26
00043b 81e8      	LD   R30,Y
00043c e0f0      	LDI  R31,0
00043d 59ec      	SUBI R30,LOW(-__base_y_G101)
00043e 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00043f 81e0      	LD   R30,Z
000440 81a9      	LDD  R26,Y+1
000441 0fae      	ADD  R26,R30
000442 dfeb      	RCALL __lcd_write_data
000443 8059      	LDD  R5,Y+1
000444 8048      	LDD  R4,Y+0
000445 9622      	ADIW R28,2
000446 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000447 e0a2      	LDI  R26,LOW(2)
000448 940e 05ea 	CALL SUBOPT_0x29
00044a e0ac      	LDI  R26,LOW(12)
00044b dfe2      	RCALL __lcd_write_data
00044c e0a1      	LDI  R26,LOW(1)
00044d 940e 05ea 	CALL SUBOPT_0x29
00044f e0e0      	LDI  R30,LOW(0)
000450 2e4e      	MOV  R4,R30
000451 2e5e      	MOV  R5,R30
000452 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000453 93aa      	ST   -Y,R26
000454 81a8      	LD   R26,Y
000455 30aa      	CPI  R26,LOW(0xA)
000456 f011      	BREQ _0x2020005
000457 1457      	CP   R5,R7
000458 f048      	BRLO _0x2020004
                 _0x2020005:
000459 e0e0      	LDI  R30,LOW(0)
00045a 93ea      	ST   -Y,R30
00045b 9443      	INC  R4
00045c 2da4      	MOV  R26,R4
00045d dfdc      	RCALL _lcd_gotoxy
00045e 81a8      	LD   R26,Y
00045f 30aa      	CPI  R26,LOW(0xA)
000460 f409      	BRNE _0x2020007
000461 c054      	RJMP _0x20A0001
                 _0x2020007:
                 _0x2020004:
000462 9453      	INC  R5
000463 9ad8      	SBI  0x1B,0
000464 81a8      	LD   R26,Y
000465 dfc8      	RCALL __lcd_write_data
000466 98d8      	CBI  0x1B,0
000467 c04e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000468 93ba      	ST   -Y,R27
000469 93aa      	ST   -Y,R26
00046a 931a      	ST   -Y,R17
                 _0x2020008:
00046b 81a9      	LDD  R26,Y+1
00046c 81ba      	LDD  R27,Y+1+1
00046d 91ed      	LD   R30,X+
00046e 83a9      	STD  Y+1,R26
00046f 83ba      	STD  Y+1+1,R27
000470 2f1e      	MOV  R17,R30
000471 30e0      	CPI  R30,0
000472 f019      	BREQ _0x202000A
000473 2fa1      	MOV  R26,R17
000474 dfde      	RCALL _lcd_putchar
000475 cff5      	RJMP _0x2020008
                 _0x202000A:
000476 c010      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000477 93ba      	ST   -Y,R27
000478 93aa      	ST   -Y,R26
000479 931a      	ST   -Y,R17
                 _0x202000B:
00047a 81e9      	LDD  R30,Y+1
00047b 81fa      	LDD  R31,Y+1+1
00047c 9631      	ADIW R30,1
00047d 83e9      	STD  Y+1,R30
00047e 83fa      	STD  Y+1+1,R31
00047f 9731      	SBIW R30,1
000480 91e4      	LPM  R30,Z
000481 2f1e      	MOV  R17,R30
000482 30e0      	CPI  R30,0
000483 f019      	BREQ _0x202000D
000484 2fa1      	MOV  R26,R17
000485 dfcd      	RCALL _lcd_putchar
000486 cff3      	RJMP _0x202000B
                 _0x202000D:
                 _0x20A0002:
000487 8118      	LDD  R17,Y+0
000488 9623      	ADIW R28,3
000489 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00048a 93aa      	ST   -Y,R26
00048b b3ea      	IN   R30,0x1A
00048c 6fe0      	ORI  R30,LOW(0xF0)
00048d bbea      	OUT  0x1A,R30
00048e 9ad2      	SBI  0x1A,2
00048f 9ad0      	SBI  0x1A,0
000490 9ad1      	SBI  0x1A,1
000491 98da      	CBI  0x1B,2
000492 98d8      	CBI  0x1B,0
000493 98d9      	CBI  0x1B,1
000494 8078      	LDD  R7,Y+0
000495 81e8      	LD   R30,Y
000496 58e0      	SUBI R30,-LOW(128)
                +
000497 93e0 0266+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000499 81e8      	LD   R30,Y
00049a 54e0      	SUBI R30,-LOW(192)
                +
00049b 93e0 0267+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00049d e1a4      	LDI  R26,LOW(20)
00049e e0b0      	LDI  R27,0
00049f 940e 05f8 	CALL _delay_ms
0004a1 940e 05f0 	CALL SUBOPT_0x2A
0004a3 940e 05f0 	CALL SUBOPT_0x2A
0004a5 940e 05f0 	CALL SUBOPT_0x2A
0004a7 e2a0      	LDI  R26,LOW(32)
0004a8 df71      	RCALL __lcd_write_nibble_G101
                +
0004a9 ec88     +LDI R24 , LOW ( 200 )
0004aa e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004ab 9701     +SBIW R24 , 1
0004ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004ad e2a8      	LDI  R26,LOW(40)
0004ae df7f      	RCALL __lcd_write_data
0004af e0a4      	LDI  R26,LOW(4)
0004b0 df7d      	RCALL __lcd_write_data
0004b1 e8a5      	LDI  R26,LOW(133)
0004b2 df7b      	RCALL __lcd_write_data
0004b3 e0a6      	LDI  R26,LOW(6)
0004b4 df79      	RCALL __lcd_write_data
0004b5 df91      	RCALL _lcd_clear
                 _0x20A0001:
0004b6 9621      	ADIW R28,1
0004b7 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G100:
000260           	.BYTE 0x4
                 __base_y_G101:
000264           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
0004b8 93ea      	ST   -Y,R30
0004b9 e0a1      	LDI  R26,LOW(1)
0004ba 940c 043a 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0004bc 940e 05f8 	CALL _delay_ms
0004be 940c 0447 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0004c0 8fe8      	STD  Y+24,R30
0004c1 8ff9      	STD  Y+24+1,R31
0004c2 e0e1      	LDI  R30,LOW(1)
0004c3 e0f0      	LDI  R31,HIGH(1)
0004c4 8bee      	STD  Y+22,R30
0004c5 8bff      	STD  Y+22+1,R31
0004c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0004c7 e0aa      	LDI  R26,LOW(10)
0004c8 e0b0      	LDI  R27,0
0004c9 940c 05f8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0004cb e0e0      	LDI  R30,LOW(0)
                +
0004cc a3ea     +STD Y + 34 , R30
0004cd a3eb     +STD Y + 34 + 1 , R30
0004ce a3ec     +STD Y + 34 + 2 , R30
0004cf a3ed     +STD Y + 34 + 3 , R30
                 	__CLRD1S 34
0004d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
                +
0004d1 8fee     +STD Y + 30 , R30
0004d2 8fef     +STD Y + 30 + 1 , R30
0004d3 a3e8     +STD Y + 30 + 2 , R30
0004d4 a3e9     +STD Y + 30 + 3 , R30
                 	__CLRD1S 30
0004d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0004d6 e0e1      	LDI  R30,LOW(1)
0004d7 e0f0      	LDI  R31,HIGH(1)
0004d8 17e4      	CP   R30,R20
0004d9 07f5      	CPC  R31,R21
0004da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x7:
0004db 931a      	ST   -Y,R17
0004dc 930a      	ST   -Y,R16
0004dd 01de      	MOVW R26,R28
0004de 9616      	ADIW R26,6
0004df 940e 03ec 	CALL _itoa
0004e1 01de      	MOVW R26,R28
0004e2 9614      	ADIW R26,4
0004e3 940e 0468 	CALL _lcd_puts
                +
0004e5 e040     +LDI R20 , LOW ( 0 )
0004e6 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0004e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0004e8 e2af      	LDI  R26,LOW(47)
0004e9 940e 0453 	CALL _lcd_putchar
0004eb e0e0      	LDI  R30,LOW(0)
0004ec 8bee      	STD  Y+22,R30
0004ed 8bef      	STD  Y+22+1,R30
0004ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0004ef e0e3      	LDI  R30,LOW(3)
0004f0 e0f0      	LDI  R31,HIGH(3)
0004f1 17e2      	CP   R30,R18
0004f2 07f3      	CPC  R31,R19
0004f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
                +
0004f4 a1ea     +LDD R30 , Y + 34
0004f5 a1fb     +LDD R31 , Y + 34 + 1
0004f6 a16c     +LDD R22 , Y + 34 + 2
0004f7 a17d     +LDD R23 , Y + 34 + 3
                 	__GETD1S 34
0004f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xB:
                +
0004f9 e0aa     +LDI R26 , LOW ( 0xA )
0004fa e0b0     +LDI R27 , HIGH ( 0xA )
0004fb e080     +LDI R24 , BYTE3 ( 0xA )
0004fc e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
0004fd 940e 064a 	CALL __MULD12
0004ff 01df      	MOVW R26,R30
000500 01cb      	MOVW R24,R22
000501 01f8      	MOVW R30,R16
000502 940e 0618 	CALL __CWD1
000504 940e 0602 	CALL __ADDD12
000506 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xC:
                +
000507 a1aa     +LDD R26 , Y + 34
000508 a1bb     +LDD R27 , Y + 34 + 1
000509 a18c     +LDD R24 , Y + 34 + 2
00050a a19d     +LDD R25 , Y + 34 + 3
                 	__GETD2S 34
00050b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
                +
00050c 30a1     +CPI R26 , LOW ( 0x3D0901 )
00050d e0e9     +LDI R30 , HIGH ( 0x3D0901 )
00050e 07be     +CPC R27 , R30
00050f e3ed     +LDI R30 , BYTE3 ( 0x3D0901 )
000510 078e     +CPC R24 , R30
000511 e0e0     +LDI R30 , BYTE4 ( 0x3D0901 )
000512 079e     +CPC R25 , R30
                 	__CPD2N 0x3D0901
000513 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
000514 dff2      	RCALL SUBOPT_0xC
                +
000515 30aa     +CPI R26 , LOW ( 0x3D0A )
000516 e3ed     +LDI R30 , HIGH ( 0x3D0A )
000517 07be     +CPC R27 , R30
000518 e0e0     +LDI R30 , BYTE3 ( 0x3D0A )
000519 078e     +CPC R24 , R30
00051a e0e0     +LDI R30 , BYTE4 ( 0x3D0A )
00051b 079e     +CPC R25 , R30
                 	__CPD2N 0x3D0A
00051c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
00051d bfe3      	OUT  0x33,R30
00051e e0e0      	LDI  R30,LOW(0)
00051f bfe2      	OUT  0x32,R30
000520 cfd3      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
000521 940e 0613 	CALL __LSLD1
                +
000523 e0a0     +LDI R26 , LOW ( 0x7A1200 )
000524 e1b2     +LDI R27 , HIGH ( 0x7A1200 )
000525 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
000526 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
000527 940e 0674 	CALL __DIVD21
000529 50e1      	SUBI R30,LOW(1)
00052a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
                +
00052b 32a1     +CPI R26 , LOW ( 0x7A121 )
00052c eae1     +LDI R30 , HIGH ( 0x7A121 )
00052d 07be     +CPC R27 , R30
00052e e0e7     +LDI R30 , BYTE3 ( 0x7A121 )
00052f 078e     +CPC R24 , R30
000530 e0e0     +LDI R30 , BYTE4 ( 0x7A121 )
000531 079e     +CPC R25 , R30
                 	__CPD2N 0x7A121
000532 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
                +
000533 3aa1     +CPI R26 , LOW ( 0x7A1 )
000534 e0e7     +LDI R30 , HIGH ( 0x7A1 )
000535 07be     +CPC R27 , R30
000536 e0e0     +LDI R30 , BYTE3 ( 0x7A1 )
000537 078e     +CPC R24 , R30
000538 e0e0     +LDI R30 , BYTE4 ( 0x7A1 )
000539 079e     +CPC R25 , R30
                 	__CPD2N 0x7A1
00053a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x13:
                +
00053b e1a0     +LDI R26 , LOW ( 0x10 )
00053c e0b0     +LDI R27 , HIGH ( 0x10 )
00053d e080     +LDI R24 , BYTE3 ( 0x10 )
00053e e090     +LDI R25 , BYTE4 ( 0x10 )
                 	__GETD2N 0x10
00053f 940e 064a 	CALL __MULD12
                +
000541 e0a0     +LDI R26 , LOW ( 0x7A1200 )
000542 e1b2     +LDI R27 , HIGH ( 0x7A1200 )
000543 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
000544 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
000545 940e 0674 	CALL __DIVD21
000547 50e1      	SUBI R30,LOW(1)
000548 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
                +
000549 32a5     +CPI R26 , LOW ( 0xF425 )
00054a efe4     +LDI R30 , HIGH ( 0xF425 )
00054b 07be     +CPC R27 , R30
00054c e0e0     +LDI R30 , BYTE3 ( 0xF425 )
00054d 078e     +CPC R24 , R30
00054e e0e0     +LDI R30 , BYTE4 ( 0xF425 )
00054f 079e     +CPC R25 , R30
                 	__CPD2N 0xF425
000550 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
                +
000551 3fa4     +CPI R26 , LOW ( 0xF4 )
000552 e0e0     +LDI R30 , HIGH ( 0xF4 )
000553 07be     +CPC R27 , R30
000554 e0e0     +LDI R30 , BYTE3 ( 0xF4 )
000555 078e     +CPC R24 , R30
000556 e0e0     +LDI R30 , BYTE4 ( 0xF4 )
000557 079e     +CPC R25 , R30
                 	__CPD2N 0xF4
000558 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x16:
                +
000559 e8a0     +LDI R26 , LOW ( 0x80 )
00055a e0b0     +LDI R27 , HIGH ( 0x80 )
00055b e080     +LDI R24 , BYTE3 ( 0x80 )
00055c e090     +LDI R25 , BYTE4 ( 0x80 )
                 	__GETD2N 0x80
00055d 940e 064a 	CALL __MULD12
                +
00055f e0a0     +LDI R26 , LOW ( 0x7A1200 )
000560 e1b2     +LDI R27 , HIGH ( 0x7A1200 )
000561 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
000562 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
000563 940e 0674 	CALL __DIVD21
000565 50e1      	SUBI R30,LOW(1)
000566 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x17:
                +
000567 33ad     +CPI R26 , LOW ( 0x3D )
000568 e0e0     +LDI R30 , HIGH ( 0x3D )
000569 07be     +CPC R27 , R30
00056a e0e0     +LDI R30 , BYTE3 ( 0x3D )
00056b 078e     +CPC R24 , R30
00056c e0e0     +LDI R30 , BYTE4 ( 0x3D )
00056d 079e     +CPC R25 , R30
                 	__CPD2N 0x3D
00056e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x18:
                +
00056f e0a0     +LDI R26 , LOW ( 0x200 )
000570 e0b2     +LDI R27 , HIGH ( 0x200 )
000571 e080     +LDI R24 , BYTE3 ( 0x200 )
000572 e090     +LDI R25 , BYTE4 ( 0x200 )
                 	__GETD2N 0x200
000573 940e 064a 	CALL __MULD12
                +
000575 e0a0     +LDI R26 , LOW ( 0x7A1200 )
000576 e1b2     +LDI R27 , HIGH ( 0x7A1200 )
000577 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
000578 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
000579 940e 0674 	CALL __DIVD21
00057b 50e1      	SUBI R30,LOW(1)
00057c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x19:
                +
00057d 34a3     +CPI R26 , LOW ( 0xF43 )
00057e e0ef     +LDI R30 , HIGH ( 0xF43 )
00057f 07be     +CPC R27 , R30
000580 e0e0     +LDI R30 , BYTE3 ( 0xF43 )
000581 078e     +CPC R24 , R30
000582 e0e0     +LDI R30 , BYTE4 ( 0xF43 )
000583 079e     +CPC R25 , R30
                 	__CPD2N 0xF43
000584 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1A:
000585 df81      	RCALL SUBOPT_0xC
                +
000586 30af     +CPI R26 , LOW ( 0xF )
000587 e0e0     +LDI R30 , HIGH ( 0xF )
000588 07be     +CPC R27 , R30
000589 e0e0     +LDI R30 , BYTE3 ( 0xF )
00058a 078e     +CPC R24 , R30
00058b e0e0     +LDI R30 , BYTE4 ( 0xF )
00058c 079e     +CPC R25 , R30
                 	__CPD2N 0xF
00058d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1B:
                +
00058e e0a0     +LDI R26 , LOW ( 0x800 )
00058f e0b8     +LDI R27 , HIGH ( 0x800 )
000590 e080     +LDI R24 , BYTE3 ( 0x800 )
000591 e090     +LDI R25 , BYTE4 ( 0x800 )
                 	__GETD2N 0x800
000592 940e 064a 	CALL __MULD12
                +
000594 e0a0     +LDI R26 , LOW ( 0x7A1200 )
000595 e1b2     +LDI R27 , HIGH ( 0x7A1200 )
000596 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
000597 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
000598 940e 0674 	CALL __DIVD21
00059a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1C:
                +
00059b 30a1     +CPI R26 , LOW ( 0x1 )
00059c e0e0     +LDI R30 , HIGH ( 0x1 )
00059d 07be     +CPC R27 , R30
00059e e0e0     +LDI R30 , BYTE3 ( 0x1 )
00059f 078e     +CPC R24 , R30
0005a0 e0e0     +LDI R30 , BYTE4 ( 0x1 )
0005a1 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0005a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1D:
0005a3 9731      	SBIW R30,1
0005a4 bdfb      	OUT  0x2A+1,R31
0005a5 bdea      	OUT  0x2A,R30
0005a6 b5ea      	IN   R30,0x2A
0005a7 b5fb      	IN   R31,0x2A+1
0005a8 93fa      	ST   -Y,R31
0005a9 93ea      	ST   -Y,R30
0005aa 01de      	MOVW R26,R28
0005ab 9616      	ADIW R26,6
0005ac 940e 03ec 	CALL _itoa
0005ae b5ea      	IN   R30,0x2A
0005af b5fb      	IN   R31,0x2A+1
0005b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1E:
0005b1 01de      	MOVW R26,R28
0005b2 9616      	ADIW R26,6
0005b3 940c 03ec 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1F:
0005b5 01de      	MOVW R26,R28
0005b6 9614      	ADIW R26,4
0005b7 940c 0468 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
                +
0005b9 8dee     +LDD R30 , Y + 30
0005ba 8dff     +LDD R31 , Y + 30 + 1
0005bb a168     +LDD R22 , Y + 30 + 2
0005bc a179     +LDD R23 , Y + 30 + 3
                 	__GETD1S 30
0005bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x21:
                +
0005be 8dae     +LDD R26 , Y + 30
0005bf 8dbf     +LDD R27 , Y + 30 + 1
0005c0 a188     +LDD R24 , Y + 30 + 2
0005c1 a199     +LDD R25 , Y + 30 + 3
                 	__GETD2S 30
0005c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x22:
                +
0005c3 30a9     +CPI R26 , LOW ( 0x3D09 )
0005c4 e3ed     +LDI R30 , HIGH ( 0x3D09 )
0005c5 07be     +CPC R27 , R30
0005c6 e0e0     +LDI R30 , BYTE3 ( 0x3D09 )
0005c7 078e     +CPC R24 , R30
0005c8 e0e0     +LDI R30 , BYTE4 ( 0x3D09 )
0005c9 079e     +CPC R25 , R30
                 	__CPD2N 0x3D09
0005ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x23:
0005cb bde5      	OUT  0x25,R30
0005cc e0e0      	LDI  R30,LOW(0)
0005cd bde4      	OUT  0x24,R30
0005ce cfea      	RJMP SUBOPT_0x20
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x24:
0005cf bde3      	OUT  0x23,R30
0005d0 b5e3      	IN   R30,0x23
0005d1 e0f0      	LDI  R31,0
0005d2 93fa      	ST   -Y,R31
0005d3 93ea      	ST   -Y,R30
0005d4 cfdc      	RJMP SUBOPT_0x1E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x25:
0005d5 dfe8      	RCALL SUBOPT_0x21
                +
0005d6 30af     +CPI R26 , LOW ( 0xF )
0005d7 e0e0     +LDI R30 , HIGH ( 0xF )
0005d8 07be     +CPC R27 , R30
0005d9 e0e0     +LDI R30 , BYTE3 ( 0xF )
0005da 078e     +CPC R24 , R30
0005db e0e0     +LDI R30 , BYTE4 ( 0xF )
0005dc 079e     +CPC R25 , R30
                 	__CPD2N 0xF
0005dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x26:
                +
0005de 8dea     +LDD R30 , Y + 26
0005df 8dfb     +LDD R31 , Y + 26 + 1
0005e0 8d6c     +LDD R22 , Y + 26 + 2
0005e1 8d7d     +LDD R23 , Y + 26 + 3
                 	__GETD1S 26
0005e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x27:
                +
0005e3 8daa     +LDD R26 , Y + 26
0005e4 8dbb     +LDD R27 , Y + 26 + 1
0005e5 8d8c     +LDD R24 , Y + 26 + 2
0005e6 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
0005e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
0005e8 dffa      	RCALL SUBOPT_0x27
0005e9 cfb1      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
0005ea 940e 042e 	CALL __lcd_write_data
0005ec e0a3      	LDI  R26,LOW(3)
0005ed e0b0      	LDI  R27,0
0005ee 940c 05f8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2A:
0005f0 e3a0      	LDI  R26,LOW(48)
0005f1 940e 041a 	CALL __lcd_write_nibble_G101
                +
0005f3 ec88     +LDI R24 , LOW ( 200 )
0005f4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0005f5 9701     +SBIW R24 , 1
0005f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0005f7 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005f8 9610      	adiw r26,0
0005f9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005fa ed80     +LDI R24 , LOW ( 0x7D0 )
0005fb e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005fc 9701     +SBIW R24 , 1
0005fd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005fe 95a8      	wdr
0005ff 9711      	sbiw r26,1
000600 f7c9      	brne __delay_ms0
                 __delay_ms1:
000601 9508      	ret
                 
                 __ADDD12:
000602 0fea      	ADD  R30,R26
000603 1ffb      	ADC  R31,R27
000604 1f68      	ADC  R22,R24
000605 1f79      	ADC  R23,R25
000606 9508      	RET
                 
                 __ANEGW1:
000607 95f1      	NEG  R31
000608 95e1      	NEG  R30
000609 40f0      	SBCI R31,0
00060a 9508      	RET
                 
                 __ANEGD1:
00060b 95f0      	COM  R31
00060c 9560      	COM  R22
00060d 9570      	COM  R23
00060e 95e1      	NEG  R30
00060f 4fff      	SBCI R31,-1
000610 4f6f      	SBCI R22,-1
000611 4f7f      	SBCI R23,-1
000612 9508      	RET
                 
                 __LSLD1:
000613 0fee      	LSL  R30
000614 1fff      	ROL  R31
000615 1f66      	ROL  R22
000616 1f77      	ROL  R23
000617 9508      	RET
                 
                 __CWD1:
000618 2f6f      	MOV  R22,R31
000619 0f66      	ADD  R22,R22
00061a 0b66      	SBC  R22,R22
00061b 2f76      	MOV  R23,R22
00061c 9508      	RET
                 
                 __MULW12U:
00061d 9ffa      	MUL  R31,R26
00061e 2df0      	MOV  R31,R0
00061f 9feb      	MUL  R30,R27
000620 0df0      	ADD  R31,R0
000621 9fea      	MUL  R30,R26
000622 2de0      	MOV  R30,R0
000623 0df1      	ADD  R31,R1
000624 9508      	RET
                 
                 __MULD12U:
000625 9f7a      	MUL  R23,R26
000626 2d70      	MOV  R23,R0
000627 9f6b      	MUL  R22,R27
000628 0d70      	ADD  R23,R0
000629 9ff8      	MUL  R31,R24
00062a 0d70      	ADD  R23,R0
00062b 9fe9      	MUL  R30,R25
00062c 0d70      	ADD  R23,R0
00062d 9f6a      	MUL  R22,R26
00062e 2d60      	MOV  R22,R0
00062f 0d71      	ADD  R23,R1
000630 9ffb      	MUL  R31,R27
000631 0d60      	ADD  R22,R0
000632 1d71      	ADC  R23,R1
000633 9fe8      	MUL  R30,R24
000634 0d60      	ADD  R22,R0
000635 1d71      	ADC  R23,R1
000636 2788      	CLR  R24
000637 9ffa      	MUL  R31,R26
000638 2df0      	MOV  R31,R0
000639 0d61      	ADD  R22,R1
00063a 1f78      	ADC  R23,R24
00063b 9feb      	MUL  R30,R27
00063c 0df0      	ADD  R31,R0
00063d 1d61      	ADC  R22,R1
00063e 1f78      	ADC  R23,R24
00063f 9fea      	MUL  R30,R26
000640 2de0      	MOV  R30,R0
000641 0df1      	ADD  R31,R1
000642 1f68      	ADC  R22,R24
000643 1f78      	ADC  R23,R24
000644 9508      	RET
                 
                 __MULW12:
000645 d033      	RCALL __CHKSIGNW
000646 dfd6      	RCALL __MULW12U
000647 f40e      	BRTC __MULW121
000648 dfbe      	RCALL __ANEGW1
                 __MULW121:
000649 9508      	RET
                 
                 __MULD12:
00064a d03c      	RCALL __CHKSIGND
00064b dfd9      	RCALL __MULD12U
00064c f40e      	BRTC __MULD121
00064d dfbd      	RCALL __ANEGD1
                 __MULD121:
00064e 9508      	RET
                 
                 __DIVD21U:
00064f 933f      	PUSH R19
000650 934f      	PUSH R20
000651 935f      	PUSH R21
000652 2400      	CLR  R0
000653 2411      	CLR  R1
000654 2744      	CLR  R20
000655 2755      	CLR  R21
000656 e230      	LDI  R19,32
                 __DIVD21U1:
000657 0faa      	LSL  R26
000658 1fbb      	ROL  R27
000659 1f88      	ROL  R24
00065a 1f99      	ROL  R25
00065b 1c00      	ROL  R0
00065c 1c11      	ROL  R1
00065d 1f44      	ROL  R20
00065e 1f55      	ROL  R21
00065f 1a0e      	SUB  R0,R30
000660 0a1f      	SBC  R1,R31
000661 0b46      	SBC  R20,R22
000662 0b57      	SBC  R21,R23
000663 f428      	BRCC __DIVD21U2
000664 0e0e      	ADD  R0,R30
000665 1e1f      	ADC  R1,R31
000666 1f46      	ADC  R20,R22
000667 1f57      	ADC  R21,R23
000668 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000669 60a1      	SBR  R26,1
                 __DIVD21U3:
00066a 953a      	DEC  R19
00066b f759      	BRNE __DIVD21U1
00066c 01fd      	MOVW R30,R26
00066d 01bc      	MOVW R22,R24
00066e 01d0      	MOVW R26,R0
00066f 01ca      	MOVW R24,R20
000670 915f      	POP  R21
000671 914f      	POP  R20
000672 913f      	POP  R19
000673 9508      	RET
                 
                 __DIVD21:
000674 d012      	RCALL __CHKSIGND
000675 dfd9      	RCALL __DIVD21U
000676 f40e      	BRTC __DIVD211
000677 df93      	RCALL __ANEGD1
                 __DIVD211:
000678 9508      	RET
                 
                 __CHKSIGNW:
000679 94e8      	CLT
00067a fff7      	SBRS R31,7
00067b c002      	RJMP __CHKSW1
00067c df8a      	RCALL __ANEGW1
00067d 9468      	SET
                 __CHKSW1:
00067e ffb7      	SBRS R27,7
00067f c006      	RJMP __CHKSW2
000680 95a0      	COM  R26
000681 95b0      	COM  R27
000682 9611      	ADIW R26,1
000683 f800      	BLD  R0,0
000684 9403      	INC  R0
000685 fa00      	BST  R0,0
                 __CHKSW2:
000686 9508      	RET
                 
                 __CHKSIGND:
000687 94e8      	CLT
000688 ff77      	SBRS R23,7
000689 c002      	RJMP __CHKSD1
00068a df80      	RCALL __ANEGD1
00068b 9468      	SET
                 __CHKSD1:
00068c ff97      	SBRS R25,7
00068d c00b      	RJMP __CHKSD2
00068e 2400      	CLR  R0
00068f 95a0      	COM  R26
000690 95b0      	COM  R27
000691 9580      	COM  R24
000692 9590      	COM  R25
000693 9611      	ADIW R26,1
000694 1d80      	ADC  R24,R0
000695 1d90      	ADC  R25,R0
000696 f800      	BLD  R0,0
000697 9403      	INC  R0
000698 fa00      	BST  R0,0
                 __CHKSD2:
000699 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00069a 0fac      	ADD  R26,R28
00069b 1fbd      	ADC  R27,R29
                 __INITLOC0:
00069c 9005      	LPM  R0,Z+
00069d 920d      	ST   X+,R0
00069e 958a      	DEC  R24
00069f f7e1      	BRNE __INITLOC0
0006a0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  33 r1 :  12 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  15 r17:  21 r18:  10 r19:  12 r20:  21 r21:  20 r22:  40 r23:  25 
r24:  78 r25:  51 r26: 143 r27:  78 r28:  11 r29:   2 r30: 356 r31:  79 
x  :   8 y  : 162 z  :  10 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :  17 
adiw  :  14 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  18 
brge  :  34 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   1 brmi  :   0 brne  :  26 brpl  :   1 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   2 call  : 188 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :  11 
cp    :   7 cpc   :  58 cpi   :  22 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  14 inc   :   5 jmp   :  28 ld    :  17 ldd   :  58 ldi   : 323 
lds   :   0 lpm   :  10 lsl   :   2 lsr   :   0 mov   :  17 movw  :  17 
mul   :  13 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   1 
ori   :   1 out   :  46 pop   :   3 push  :   3 rcall :  34 ret   :  55 
reti  :   0 rjmp  : 102 rol   :  10 ror   :   0 sbc   :   5 sbci  :   5 
sbi   :  13 sbic  :  17 sbis  :  17 sbiw  :  24 sbr   :   1 sbrc  :   0 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  37 std   :  59 sts   :   2 sub   :   2 subi  :  10 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 63 out of 116 (54.3%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d42   3280    114   3394   32768  10.4%
[.dseg] 0x000060 0x000268      0      8      8    2048   0.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
