
AVRASM ver. 2.1.30  D:\AAST\Microcontroller\Programs\Project one\Code\Debug\List\Project_one.asm Mon Jun 08 21:25:04 2020

D:\AAST\Microcontroller\Programs\Project one\Code\Debug\List\Project_one.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\AAST\Microcontroller\Programs\Project one\Code\Debug\List\Project_one.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\AAST\Microcontroller\Programs\Project one\Code\Debug\List\Project_one.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\AAST\Microcontroller\Programs\Project one\Code\Debug\List\Project_one.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\AAST\Microcontroller\Programs\Project one\Code\Debug\List\Project_one.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _P_S=R4
                 	.DEF _P_S_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000      	.DB  0x0,0x0
                 
                 _0x2000003:
00002b c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\AAST\Microcontroller\Programs\Project one\Code\Debug\List\Project_one.asm(1130): warning: .cseg .db misalignment - padding zero byte
00002c 0001      	.DB  0x1
                 _0x2020000:
00002d 4e2d
00002e 4e41
00002f 4900
000030 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\AAST\Microcontroller\Programs\Project one\Code\Debug\List\Project_one.asm(1133): warning: .cseg .db misalignment - padding zero byte
000031 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000032 0002      	.DW  0x02
000033 0004      	.DW  0x04
000034 0054      	.DW  __REG_VARS*2
                 
000035 0002      	.DW  0x02
000036 029e      	.DW  __base_y_G100
000037 0056      	.DW  _0x2000003*2
                 
000038 0001      	.DW  0x01
000039 02a2      	.DW  __seed_G101
00003a 0058      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e6e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0076 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0007 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0008 ADMUX=adc_input | ADC_VREF_TYPE;
000069 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00006a 81e8      	LD   R30,Y
00006b 62e0      	ORI  R30,0x20
00006c b9e7      	OUT  0x7,R30
                 ; 0000 0009 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 000A delay_us(10);
                +
00006d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00006e 958a     +DEC R24
00006f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 000B // Start the AD conversion
                 ; 0000 000C ADCSRA|=(1<<ADSC);
000070 9a36      	SBI  0x6,6
                 ; 0000 000D // Wait for the AD conversion to complete
                 ; 0000 000E while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000071 9b34      	SBIS 0x6,4
000072 cffe      	RJMP _0x3
                 ; 0000 000F ADCSRA|=(1<<ADIF);
000073 9a34      	SBI  0x6,4
                 ; 0000 0010 return ADCH;
000074 b1e5      	IN   R30,0x5
000075 c199      	RJMP _0x20A0001
                 ; 0000 0011 }
                 ; .FEND
                 ;unsigned long int x=0;
                 ;unsigned long int y=0;
                 ;unsigned long int f=0;
                 ;int P_S=0;
                 ;char num[50];
                 ;void main(void)  {
                 ; 0000 0017 void main(void)  {
                 _main:
                 ; .FSTART _main
                 ; 0000 0018 ADMUX=ADC_VREF_TYPE;
000076 e2e0      	LDI  R30,LOW(32)
000077 b9e7      	OUT  0x7,R30
                 ; 0000 0019 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000078 eae3      	LDI  R30,LOW(163)
000079 b9e6      	OUT  0x6,R30
                 ; 0000 001A SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00007a e0e0      	LDI  R30,LOW(0)
00007b bfe0      	OUT  0x30,R30
                 ; 0000 001B DDRB.0=0;
00007c 98b8      	CBI  0x17,0
                 ; 0000 001C DDRB.1=0;
00007d 98b9      	CBI  0x17,1
                 ; 0000 001D PORTB.0=1;
00007e 9ac0      	SBI  0x18,0
                 ; 0000 001E PORTB.1=1;
00007f 9ac1      	SBI  0x18,1
                 ; 0000 001F DDRB.3=1;
000080 9abb      	SBI  0x17,3
                 ; 0000 0020 PORTB.3=0;
000081 98c3      	CBI  0x18,3
                 ; 0000 0021 DDRD= 0b11111111;
000082 efef      	LDI  R30,LOW(255)
000083 bbe1      	OUT  0x11,R30
                 ; 0000 0022 PORTD=0b00000000;
000084 e0e0      	LDI  R30,LOW(0)
000085 bbe2      	OUT  0x12,R30
                 ; 0000 0023 lcd_init(16);
000086 e1a0      	LDI  R26,LOW(16)
000087 d15b      	RCALL _lcd_init
                 ; 0000 0024 lcd_clear();
000088 d128      	RCALL _lcd_clear
                 ; 0000 0025 while (1){
                 _0x12:
                 ; 0000 0026 x = read_adc(0);
000089 e0a0      	LDI  R26,LOW(0)
00008a dfde      	RCALL _read_adc
00008b 27ff      	CLR  R31
00008c 2766      	CLR  R22
00008d 2777      	CLR  R23
00008e 93e0 0260 	STS  _x,R30
000090 93f0 0261 	STS  _x+1,R31
000092 9360 0262 	STS  _x+2,R22
000094 9370 0263 	STS  _x+3,R23
                 ; 0000 0027 lcd_gotoxy(0,0);
000096 e0e0      	LDI  R30,LOW(0)
000097 940e 023f 	CALL SUBOPT_0x0
                 ; 0000 0028 itoa (x,num);
000099 91e0 0260 	LDS  R30,_x
00009b 91f0 0261 	LDS  R31,_x+1
00009d 940e 0243 	CALL SUBOPT_0x1
                 ; 0000 0029 lcd_puts(num);
                 ; 0000 002A if ( PINB.0==0) { while (PINB.0==0){ lcd_clear(); f=0;}y++;}
00009f 99b0      	SBIC 0x16,0
0000a0 c00e      	RJMP _0x15
                 _0x16:
0000a1 99b0      	SBIC 0x16,0
0000a2 c003      	RJMP _0x18
0000a3 940e 024d 	CALL SUBOPT_0x2
0000a5 cffb      	RJMP _0x16
                 _0x18:
0000a6 e6a4      	LDI  R26,LOW(_y)
0000a7 e0b2      	LDI  R27,HIGH(_y)
0000a8 940e 02f3 	CALL __GETD1P_INC
                +
0000aa 5fef     +SUBI R30 , LOW ( - 1 )
0000ab 4fff     +SBCI R31 , HIGH ( - 1 )
0000ac 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0000ad 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0000ae c00e      	RJMP _0x2B
                 ; 0000 002B else if ( PINB.1==0) { while (PINB.1==0){lcd_clear(); f=0;} y--;}
                 _0x15:
0000af 99b1      	SBIC 0x16,1
0000b0 c00e      	RJMP _0x1A
                 _0x1B:
0000b1 99b1      	SBIC 0x16,1
0000b2 c003      	RJMP _0x1D
0000b3 940e 024d 	CALL SUBOPT_0x2
0000b5 cffb      	RJMP _0x1B
                 _0x1D:
0000b6 e6a4      	LDI  R26,LOW(_y)
0000b7 e0b2      	LDI  R27,HIGH(_y)
0000b8 940e 02f3 	CALL __GETD1P_INC
0000ba 9731      	SBIW R30,1
0000bb 4060      	SBCI R22,0
0000bc 4070      	SBCI R23,0
                 _0x2B:
0000bd 940e 02f8 	CALL __PUTDP1_DEC
                 ; 0000 002C      lcd_gotoxy(5,0);
                 _0x1A:
0000bf e0e5      	LDI  R30,LOW(5)
0000c0 940e 023f 	CALL SUBOPT_0x0
                 ; 0000 002D      itoa (y,num);
0000c2 91e0 0264 	LDS  R30,_y
0000c4 91f0 0265 	LDS  R31,_y+1
0000c6 940e 0243 	CALL SUBOPT_0x1
                 ; 0000 002E     lcd_puts(num);
                 ; 0000 002F     if ( y>5 || y<0 ){ lcd_clear();x=0; f=0; y=0; TCCR0=0; TCNT0=0; OCR0=0;}
0000c8 940e 0259 	CALL SUBOPT_0x3
                +
0000ca 30a6     +CPI R26 , LOW ( 0x6 )
0000cb e0e0     +LDI R30 , HIGH ( 0x6 )
0000cc 07be     +CPC R27 , R30
0000cd e0e0     +LDI R30 , BYTE3 ( 0x6 )
0000ce 078e     +CPC R24 , R30
0000cf e0e0     +LDI R30 , BYTE4 ( 0x6 )
0000d0 079e     +CPC R25 , R30
                 	__CPD2N 0x6
0000d1 f428      	BRSH _0x1F
0000d2 940e 0259 	CALL SUBOPT_0x3
0000d4 940e 02fd 	CALL __CPD20
0000d6 f4e8      	BRSH _0x1E
                 _0x1F:
0000d7 d0d9      	RCALL _lcd_clear
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 93e0 0260 	STS  _x,R30
0000db 93e0 0261 	STS  _x+1,R30
0000dd 93e0 0262 	STS  _x+2,R30
0000df 93e0 0263 	STS  _x+3,R30
0000e1 93e0 0268 	STS  _f,R30
0000e3 93e0 0269 	STS  _f+1,R30
0000e5 93e0 026a 	STS  _f+2,R30
0000e7 93e0 026b 	STS  _f+3,R30
0000e9 93e0 0264 	STS  _y,R30
0000eb 93e0 0265 	STS  _y+1,R30
0000ed 93e0 0266 	STS  _y+2,R30
0000ef 93e0 0267 	STS  _y+3,R30
0000f1 bfe3      	OUT  0x33,R30
0000f2 bfe2      	OUT  0x32,R30
0000f3 bfec      	OUT  0x3C,R30
                 ; 0000 0030 
                 ; 0000 0031             if ( y==1 ){
                 _0x1E:
0000f4 940e 0259 	CALL SUBOPT_0x3
                +
0000f6 30a1     +CPI R26 , LOW ( 0x1 )
0000f7 e0e0     +LDI R30 , HIGH ( 0x1 )
0000f8 07be     +CPC R27 , R30
0000f9 e0e0     +LDI R30 , BYTE3 ( 0x1 )
0000fa 078e     +CPC R24 , R30
0000fb e0e0     +LDI R30 , BYTE4 ( 0x1 )
0000fc 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0000fd f451      	BRNE _0x21
                 ; 0000 0032               P_S=1;
0000fe e0e1      	LDI  R30,LOW(1)
0000ff e0f0      	LDI  R31,HIGH(1)
000100 940e 0262 	CALL SUBOPT_0x4
                 ; 0000 0033             lcd_gotoxy(8,0);
                 ; 0000 0034             itoa(P_S,num);
000102 940e 0265 	CALL SUBOPT_0x5
                 ; 0000 0035             lcd_puts(num);
                 ; 0000 0036 
                 ; 0000 0037     TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
000104 e1e9      	LDI  R30,LOW(25)
000105 940e 026f 	CALL SUBOPT_0x6
                 ; 0000 0038     f =8000000/(2*P_S*(x+1));
000107 c05b      	RJMP _0x2C
                 ; 0000 0039      lcd_gotoxy(0,1);
                 ; 0000 003A           itoa (f,num);
                 ; 0000 003B           lcd_puts(num);
                 ; 0000 003C                  }
                 ; 0000 003D 
                 ; 0000 003E               else  if ( y==2){
                 _0x21:
000108 940e 0259 	CALL SUBOPT_0x3
                +
00010a 30a2     +CPI R26 , LOW ( 0x2 )
00010b e0e0     +LDI R30 , HIGH ( 0x2 )
00010c 07be     +CPC R27 , R30
00010d e0e0     +LDI R30 , BYTE3 ( 0x2 )
00010e 078e     +CPC R24 , R30
00010f e0e0     +LDI R30 , BYTE4 ( 0x2 )
000110 079e     +CPC R25 , R30
                 	__CPD2N 0x2
000111 f451      	BRNE _0x23
                 ; 0000 003F                P_S=8;
000112 e0e8      	LDI  R30,LOW(8)
000113 e0f0      	LDI  R31,HIGH(8)
000114 940e 0262 	CALL SUBOPT_0x4
                 ; 0000 0040             lcd_gotoxy(8,0);
                 ; 0000 0041             itoa(P_S,num);
000116 940e 0265 	CALL SUBOPT_0x5
                 ; 0000 0042             lcd_puts(num);
                 ; 0000 0043    TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
000118 e1ea      	LDI  R30,LOW(26)
000119 940e 026f 	CALL SUBOPT_0x6
                 ; 0000 0044      f =8000000/(2*P_S*(x+1));
00011b c047      	RJMP _0x2C
                 ; 0000 0045        lcd_gotoxy(0,1);
                 ; 0000 0046         itoa (f,num);
                 ; 0000 0047         lcd_puts(num);
                 ; 0000 0048              }
                 ; 0000 0049                 else if ( y==3){
                 _0x23:
00011c 940e 0259 	CALL SUBOPT_0x3
                +
00011e 30a3     +CPI R26 , LOW ( 0x3 )
00011f e0e0     +LDI R30 , HIGH ( 0x3 )
000120 07be     +CPC R27 , R30
000121 e0e0     +LDI R30 , BYTE3 ( 0x3 )
000122 078e     +CPC R24 , R30
000123 e0e0     +LDI R30 , BYTE4 ( 0x3 )
000124 079e     +CPC R25 , R30
                 	__CPD2N 0x3
000125 f471      	BRNE _0x25
                 ; 0000 004A               P_S=64;
000126 e4e0      	LDI  R30,LOW(64)
000127 e0f0      	LDI  R31,HIGH(64)
000128 940e 0262 	CALL SUBOPT_0x4
                 ; 0000 004B             lcd_gotoxy(8,0);
                 ; 0000 004C             itoa(P_S,num);
00012a 940e 0265 	CALL SUBOPT_0x5
                 ; 0000 004D             lcd_puts(num);
                 ; 0000 004E  TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
00012c e1eb      	LDI  R30,LOW(27)
00012d 940e 0283 	CALL SUBOPT_0x7
                 ; 0000 004F      f =8000000/(2*64*(x+1));
                +
00012f e8a0     +LDI R26 , LOW ( 0x80 )
000130 e0b0     +LDI R27 , HIGH ( 0x80 )
000131 e080     +LDI R24 , BYTE3 ( 0x80 )
000132 e090     +LDI R25 , BYTE4 ( 0x80 )
                 	__GETD2N 0x80
000133 c02f      	RJMP _0x2C
                 ; 0000 0050        lcd_gotoxy(0,1);
                 ; 0000 0051         itoa (f,num);
                 ; 0000 0052         lcd_puts(num);
                 ; 0000 0053              }
                 ; 0000 0054                  else  if ( y==4){
                 _0x25:
000134 940e 0259 	CALL SUBOPT_0x3
                +
000136 30a4     +CPI R26 , LOW ( 0x4 )
000137 e0e0     +LDI R30 , HIGH ( 0x4 )
000138 07be     +CPC R27 , R30
000139 e0e0     +LDI R30 , BYTE3 ( 0x4 )
00013a 078e     +CPC R24 , R30
00013b e0e0     +LDI R30 , BYTE4 ( 0x4 )
00013c 079e     +CPC R25 , R30
                 	__CPD2N 0x4
00013d f471      	BRNE _0x27
                 ; 0000 0055                 P_S=256;
00013e e0e0      	LDI  R30,LOW(256)
00013f e0f1      	LDI  R31,HIGH(256)
000140 940e 0262 	CALL SUBOPT_0x4
                 ; 0000 0056             lcd_gotoxy(8,0);
                 ; 0000 0057             itoa(P_S,num);
000142 940e 0265 	CALL SUBOPT_0x5
                 ; 0000 0058             lcd_puts(num);
                 ; 0000 0059    TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000144 e1ec      	LDI  R30,LOW(28)
000145 940e 0283 	CALL SUBOPT_0x7
                 ; 0000 005A      f =8000000/(2*256*(x+1));
                +
000147 e0a0     +LDI R26 , LOW ( 0x200 )
000148 e0b2     +LDI R27 , HIGH ( 0x200 )
000149 e080     +LDI R24 , BYTE3 ( 0x200 )
00014a e090     +LDI R25 , BYTE4 ( 0x200 )
                 	__GETD2N 0x200
00014b c017      	RJMP _0x2C
                 ; 0000 005B        lcd_gotoxy(0,1);
                 ; 0000 005C         itoa (f,num);
                 ; 0000 005D         lcd_puts(num);
                 ; 0000 005E              }
                 ; 0000 005F                    else  if ( y==5){
                 _0x27:
00014c 940e 0259 	CALL SUBOPT_0x3
                +
00014e 30a5     +CPI R26 , LOW ( 0x5 )
00014f e0e0     +LDI R30 , HIGH ( 0x5 )
000150 07be     +CPC R27 , R30
000151 e0e0     +LDI R30 , BYTE3 ( 0x5 )
000152 078e     +CPC R24 , R30
000153 e0e0     +LDI R30 , BYTE4 ( 0x5 )
000154 079e     +CPC R25 , R30
                 	__CPD2N 0x5
000155 f539      	BRNE _0x29
                 ; 0000 0060               P_S=1024;
000156 e0e0      	LDI  R30,LOW(1024)
000157 e0f4      	LDI  R31,HIGH(1024)
000158 940e 0262 	CALL SUBOPT_0x4
                 ; 0000 0061             lcd_gotoxy(8,0);
                 ; 0000 0062             itoa(P_S,num);
00015a 940e 0265 	CALL SUBOPT_0x5
                 ; 0000 0063             lcd_puts(num);
                 ; 0000 0064 
                 ; 0000 0065   TCCR0=(0<<WGM00) | (0<<COM01) | (1<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00015c e1ed      	LDI  R30,LOW(29)
00015d 940e 0283 	CALL SUBOPT_0x7
                 ; 0000 0066      f = 8000000/(2*1024*(x+1));
                +
00015f e0a0     +LDI R26 , LOW ( 0x800 )
000160 e0b8     +LDI R27 , HIGH ( 0x800 )
000161 e080     +LDI R24 , BYTE3 ( 0x800 )
000162 e090     +LDI R25 , BYTE4 ( 0x800 )
                 	__GETD2N 0x800
                 _0x2C:
000163 940e 02ae 	CALL __MULD12U
                +
000165 e0a0     +LDI R26 , LOW ( 0x7A1200 )
000166 e1b2     +LDI R27 , HIGH ( 0x7A1200 )
000167 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
000168 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
000169 940e 02ce 	CALL __DIVD21U
00016b 93e0 0268 	STS  _f,R30
00016d 93f0 0269 	STS  _f+1,R31
00016f 9360 026a 	STS  _f+2,R22
000171 9370 026b 	STS  _f+3,R23
                 ; 0000 0067        lcd_gotoxy(0,1);
000173 e0e0      	LDI  R30,LOW(0)
000174 93ea      	ST   -Y,R30
000175 e0a1      	LDI  R26,LOW(1)
000176 d02d      	RCALL _lcd_gotoxy
                 ; 0000 0068         itoa (f,num);
000177 91e0 0268 	LDS  R30,_f
000179 91f0 0269 	LDS  R31,_f+1
00017b 940e 0243 	CALL SUBOPT_0x1
                 ; 0000 0069         lcd_puts(num);
                 ; 0000 006A              }
                 ; 0000 006B               OCR0=x;
                 _0x29:
00017d 91e0 0260 	LDS  R30,_x
00017f bfec      	OUT  0x3C,R30
                 ; 0000 006C              PORTD= TCNT0;
000180 b7e2      	IN   R30,0x32
000181 bbe2      	OUT  0x12,R30
                 ; 0000 006D 
                 ; 0000 006E   }
000182 cf06      	RJMP _0x12
                 ; 0000 006F    }
                 _0x2A:
000183 cfff      	RJMP _0x2A
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000184 93aa      	ST   -Y,R26
000185 b3e5      	IN   R30,0x15
000186 70ef      	ANDI R30,LOW(0xF)
000187 2fae      	MOV  R26,R30
000188 81e8      	LD   R30,Y
000189 7fe0      	ANDI R30,LOW(0xF0)
00018a 2bea      	OR   R30,R26
00018b bbe5      	OUT  0x15,R30
                +
00018c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00018d 958a     +DEC R24
00018e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00018f 9aaa      	SBI  0x15,2
                +
000190 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000191 958a     +DEC R24
000192 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000193 98aa      	CBI  0x15,2
                +
000194 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000195 958a     +DEC R24
000196 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000197 c077      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000198 93aa      	ST   -Y,R26
000199 81a8      	LD   R26,Y
00019a dfe9      	RCALL __lcd_write_nibble_G100
00019b 81e8          ld    r30,y
00019c 95e2          swap  r30
00019d 83e8          st    y,r30
00019e 81a8      	LD   R26,Y
00019f dfe4      	RCALL __lcd_write_nibble_G100
                +
0001a0 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001a1 958a     +DEC R24
0001a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001a3 c06b      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001a4 93aa      	ST   -Y,R26
0001a5 81e8      	LD   R30,Y
0001a6 e0f0      	LDI  R31,0
0001a7 56e2      	SUBI R30,LOW(-__base_y_G100)
0001a8 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001a9 81e0      	LD   R30,Z
0001aa 81a9      	LDD  R26,Y+1
0001ab 0fae      	ADD  R26,R30
0001ac dfeb      	RCALL __lcd_write_data
0001ad 8079      	LDD  R7,Y+1
0001ae 8068      	LDD  R6,Y+0
0001af 9622      	ADIW R28,2
0001b0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001b1 e0a2      	LDI  R26,LOW(2)
0001b2 940e 0291 	CALL SUBOPT_0x8
0001b4 e0ac      	LDI  R26,LOW(12)
0001b5 dfe2      	RCALL __lcd_write_data
0001b6 e0a1      	LDI  R26,LOW(1)
0001b7 940e 0291 	CALL SUBOPT_0x8
0001b9 e0e0      	LDI  R30,LOW(0)
0001ba 2e6e      	MOV  R6,R30
0001bb 2e7e      	MOV  R7,R30
0001bc 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001bd 93aa      	ST   -Y,R26
0001be 81a8      	LD   R26,Y
0001bf 30aa      	CPI  R26,LOW(0xA)
0001c0 f011      	BREQ _0x2000005
0001c1 1479      	CP   R7,R9
0001c2 f048      	BRLO _0x2000004
                 _0x2000005:
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 93ea      	ST   -Y,R30
0001c5 9463      	INC  R6
0001c6 2da6      	MOV  R26,R6
0001c7 dfdc      	RCALL _lcd_gotoxy
0001c8 81a8      	LD   R26,Y
0001c9 30aa      	CPI  R26,LOW(0xA)
0001ca f409      	BRNE _0x2000007
0001cb c043      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
0001cc 9473      	INC  R7
0001cd 9aa8      	SBI  0x15,0
0001ce 81a8      	LD   R26,Y
0001cf dfc8      	RCALL __lcd_write_data
0001d0 98a8      	CBI  0x15,0
0001d1 c03d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001d2 93ba      	ST   -Y,R27
0001d3 93aa      	ST   -Y,R26
0001d4 931a      	ST   -Y,R17
                 _0x2000008:
0001d5 81a9      	LDD  R26,Y+1
0001d6 81ba      	LDD  R27,Y+1+1
0001d7 91ed      	LD   R30,X+
0001d8 83a9      	STD  Y+1,R26
0001d9 83ba      	STD  Y+1+1,R27
0001da 2f1e      	MOV  R17,R30
0001db 30e0      	CPI  R30,0
0001dc f019      	BREQ _0x200000A
0001dd 2fa1      	MOV  R26,R17
0001de dfde      	RCALL _lcd_putchar
0001df cff5      	RJMP _0x2000008
                 _0x200000A:
0001e0 8118      	LDD  R17,Y+0
0001e1 9623      	ADIW R28,3
0001e2 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001e3 93aa      	ST   -Y,R26
0001e4 b3e4      	IN   R30,0x14
0001e5 6fe0      	ORI  R30,LOW(0xF0)
0001e6 bbe4      	OUT  0x14,R30
0001e7 9aa2      	SBI  0x14,2
0001e8 9aa0      	SBI  0x14,0
0001e9 9aa1      	SBI  0x14,1
0001ea 98aa      	CBI  0x15,2
0001eb 98a8      	CBI  0x15,0
0001ec 98a9      	CBI  0x15,1
0001ed 8098      	LDD  R9,Y+0
0001ee 81e8      	LD   R30,Y
0001ef 58e0      	SUBI R30,-LOW(128)
                +
0001f0 93e0 02a0+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001f2 81e8      	LD   R30,Y
0001f3 54e0      	SUBI R30,-LOW(192)
                +
0001f4 93e0 02a1+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001f6 e1a4      	LDI  R26,LOW(20)
0001f7 e0b0      	LDI  R27,0
0001f8 940e 029f 	CALL _delay_ms
0001fa 940e 0297 	CALL SUBOPT_0x9
0001fc 940e 0297 	CALL SUBOPT_0x9
0001fe 940e 0297 	CALL SUBOPT_0x9
000200 e2a0      	LDI  R26,LOW(32)
000201 df82      	RCALL __lcd_write_nibble_G100
                +
000202 ec88     +LDI R24 , LOW ( 200 )
000203 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000204 9701     +SBIW R24 , 1
000205 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000206 e2a8      	LDI  R26,LOW(40)
000207 df90      	RCALL __lcd_write_data
000208 e0a4      	LDI  R26,LOW(4)
000209 df8e      	RCALL __lcd_write_data
00020a e8a5      	LDI  R26,LOW(133)
00020b df8c      	RCALL __lcd_write_data
00020c e0a6      	LDI  R26,LOW(6)
00020d df8a      	RCALL __lcd_write_data
00020e dfa2      	RCALL _lcd_clear
                 _0x20A0001:
00020f 9621      	ADIW R28,1
000210 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000211 93ba      	ST   -Y,R27
000212 93aa      	ST   -Y,R26
000213 91a9          ld   r26,y+
000214 91b9          ld   r27,y+
000215 91e9          ld   r30,y+
000216 91f9          ld   r31,y+
000217 9630          adiw r30,0
000218 f42a          brpl __itoa0
000219 95e0          com  r30
00021a 95f0          com  r31
00021b 9631          adiw r30,1
00021c e26d          ldi  r22,'-'
00021d 936d          st   x+,r22
                 __itoa0:
00021e 94e8          clt
00021f e180          ldi  r24,low(10000)
000220 e297          ldi  r25,high(10000)
000221 d00d          rcall __itoa1
000222 ee88          ldi  r24,low(1000)
000223 e093          ldi  r25,high(1000)
000224 d00a          rcall __itoa1
000225 e684          ldi  r24,100
000226 2799          clr  r25
000227 d007          rcall __itoa1
000228 e08a          ldi  r24,10
000229 d005          rcall __itoa1
00022a 2f6e          mov  r22,r30
00022b d010          rcall __itoa5
00022c 2766          clr  r22
00022d 936c          st   x,r22
00022e 9508          ret
                 
                 __itoa1:
00022f 2766          clr	 r22
                 __itoa2:
000230 17e8          cp   r30,r24
000231 07f9          cpc  r31,r25
000232 f020          brlo __itoa3
000233 9563          inc  r22
000234 1be8          sub  r30,r24
000235 0bf9          sbc  r31,r25
000236 f7c9          brne __itoa2
                 __itoa3:
000237 2366          tst  r22
000238 f411          brne __itoa4
000239 f016          brts __itoa5
00023a 9508          ret
                 __itoa4:
00023b 9468          set
                 __itoa5:
00023c 5d60          subi r22,-0x30
00023d 936d          st   x+,r22
00023e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _x:
000260           	.BYTE 0x4
                 _y:
000264           	.BYTE 0x4
                 _f:
000268           	.BYTE 0x4
                 _num:
00026c           	.BYTE 0x32
                 __base_y_G100:
00029e           	.BYTE 0x4
                 __seed_G101:
0002a2           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
00023f 93ea      	ST   -Y,R30
000240 e0a0      	LDI  R26,LOW(0)
000241 940c 01a4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000243 93fa      	ST   -Y,R31
000244 93ea      	ST   -Y,R30
000245 e6ac      	LDI  R26,LOW(_num)
000246 e0b2      	LDI  R27,HIGH(_num)
000247 940e 0211 	CALL _itoa
000249 e6ac      	LDI  R26,LOW(_num)
00024a e0b2      	LDI  R27,HIGH(_num)
00024b 940c 01d2 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
00024d 940e 01b1 	CALL _lcd_clear
00024f e0e0      	LDI  R30,LOW(0)
000250 93e0 0268 	STS  _f,R30
000252 93e0 0269 	STS  _f+1,R30
000254 93e0 026a 	STS  _f+2,R30
000256 93e0 026b 	STS  _f+3,R30
000258 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x3:
000259 91a0 0264 	LDS  R26,_y
00025b 91b0 0265 	LDS  R27,_y+1
00025d 9180 0266 	LDS  R24,_y+2
00025f 9190 0267 	LDS  R25,_y+3
000261 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000262 012f      	MOVW R4,R30
000263 e0e8      	LDI  R30,LOW(8)
000264 cfda      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x5:
000265 925a      	ST   -Y,R5
000266 924a      	ST   -Y,R4
000267 e6ac      	LDI  R26,LOW(_num)
000268 e0b2      	LDI  R27,HIGH(_num)
000269 940e 0211 	CALL _itoa
00026b e6ac      	LDI  R26,LOW(_num)
00026c e0b2      	LDI  R27,HIGH(_num)
00026d 940c 01d2 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x6:
00026f bfe3      	OUT  0x33,R30
000270 01f2      	MOVW R30,R4
000271 0fee      	LSL  R30
000272 1fff      	ROL  R31
000273 01df      	MOVW R26,R30
000274 91e0 0260 	LDS  R30,_x
000276 91f0 0261 	LDS  R31,_x+1
000278 9160 0262 	LDS  R22,_x+2
00027a 9170 0263 	LDS  R23,_x+3
                +
00027c 5fef     +SUBI R30 , LOW ( - 1 )
00027d 4fff     +SBCI R31 , HIGH ( - 1 )
00027e 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00027f 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000280 940e 02a9 	CALL __CWD2
000282 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x7:
000283 bfe3      	OUT  0x33,R30
000284 91e0 0260 	LDS  R30,_x
000286 91f0 0261 	LDS  R31,_x+1
000288 9160 0262 	LDS  R22,_x+2
00028a 9170 0263 	LDS  R23,_x+3
                +
00028c 5fef     +SUBI R30 , LOW ( - 1 )
00028d 4fff     +SBCI R31 , HIGH ( - 1 )
00028e 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00028f 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000290 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000291 940e 0198 	CALL __lcd_write_data
000293 e0a3      	LDI  R26,LOW(3)
000294 e0b0      	LDI  R27,0
000295 940c 029f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
000297 e3a0      	LDI  R26,LOW(48)
000298 940e 0184 	CALL __lcd_write_nibble_G100
                +
00029a ec88     +LDI R24 , LOW ( 200 )
00029b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00029c 9701     +SBIW R24 , 1
00029d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00029e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00029f 9610      	adiw r26,0
0002a0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002a1 ed80     +LDI R24 , LOW ( 0x7D0 )
0002a2 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002a3 9701     +SBIW R24 , 1
0002a4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002a5 95a8      	wdr
0002a6 9711      	sbiw r26,1
0002a7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002a8 9508      	ret
                 
                 __CWD2:
0002a9 2f8b      	MOV  R24,R27
0002aa 0f88      	ADD  R24,R24
0002ab 0b88      	SBC  R24,R24
0002ac 2f98      	MOV  R25,R24
0002ad 9508      	RET
                 
                 __MULD12U:
0002ae 9f7a      	MUL  R23,R26
0002af 2d70      	MOV  R23,R0
0002b0 9f6b      	MUL  R22,R27
0002b1 0d70      	ADD  R23,R0
0002b2 9ff8      	MUL  R31,R24
0002b3 0d70      	ADD  R23,R0
0002b4 9fe9      	MUL  R30,R25
0002b5 0d70      	ADD  R23,R0
0002b6 9f6a      	MUL  R22,R26
0002b7 2d60      	MOV  R22,R0
0002b8 0d71      	ADD  R23,R1
0002b9 9ffb      	MUL  R31,R27
0002ba 0d60      	ADD  R22,R0
0002bb 1d71      	ADC  R23,R1
0002bc 9fe8      	MUL  R30,R24
0002bd 0d60      	ADD  R22,R0
0002be 1d71      	ADC  R23,R1
0002bf 2788      	CLR  R24
0002c0 9ffa      	MUL  R31,R26
0002c1 2df0      	MOV  R31,R0
0002c2 0d61      	ADD  R22,R1
0002c3 1f78      	ADC  R23,R24
0002c4 9feb      	MUL  R30,R27
0002c5 0df0      	ADD  R31,R0
0002c6 1d61      	ADC  R22,R1
0002c7 1f78      	ADC  R23,R24
0002c8 9fea      	MUL  R30,R26
0002c9 2de0      	MOV  R30,R0
0002ca 0df1      	ADD  R31,R1
0002cb 1f68      	ADC  R22,R24
0002cc 1f78      	ADC  R23,R24
0002cd 9508      	RET
                 
                 __DIVD21U:
0002ce 933f      	PUSH R19
0002cf 934f      	PUSH R20
0002d0 935f      	PUSH R21
0002d1 2400      	CLR  R0
0002d2 2411      	CLR  R1
0002d3 2744      	CLR  R20
0002d4 2755      	CLR  R21
0002d5 e230      	LDI  R19,32
                 __DIVD21U1:
0002d6 0faa      	LSL  R26
0002d7 1fbb      	ROL  R27
0002d8 1f88      	ROL  R24
0002d9 1f99      	ROL  R25
0002da 1c00      	ROL  R0
0002db 1c11      	ROL  R1
0002dc 1f44      	ROL  R20
0002dd 1f55      	ROL  R21
0002de 1a0e      	SUB  R0,R30
0002df 0a1f      	SBC  R1,R31
0002e0 0b46      	SBC  R20,R22
0002e1 0b57      	SBC  R21,R23
0002e2 f428      	BRCC __DIVD21U2
0002e3 0e0e      	ADD  R0,R30
0002e4 1e1f      	ADC  R1,R31
0002e5 1f46      	ADC  R20,R22
0002e6 1f57      	ADC  R21,R23
0002e7 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0002e8 60a1      	SBR  R26,1
                 __DIVD21U3:
0002e9 953a      	DEC  R19
0002ea f759      	BRNE __DIVD21U1
0002eb 01fd      	MOVW R30,R26
0002ec 01bc      	MOVW R22,R24
0002ed 01d0      	MOVW R26,R0
0002ee 01ca      	MOVW R24,R20
0002ef 915f      	POP  R21
0002f0 914f      	POP  R20
0002f1 913f      	POP  R19
0002f2 9508      	RET
                 
                 __GETD1P_INC:
0002f3 91ed      	LD   R30,X+
0002f4 91fd      	LD   R31,X+
0002f5 916d      	LD   R22,X+
0002f6 917d      	LD   R23,X+
0002f7 9508      	RET
                 
                 __PUTDP1_DEC:
0002f8 937e      	ST   -X,R23
0002f9 936e      	ST   -X,R22
0002fa 93fe      	ST   -X,R31
0002fb 93ee      	ST   -X,R30
0002fc 9508      	RET
                 
                 __CPD20:
0002fd 9710      	SBIW R26,0
0002fe 4080      	SBCI R24,0
0002ff 4090      	SBCI R25,0
000300 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  19 r1 :  11 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   4 r20:   7 r21:   6 r22:  34 r23:  24 
r24:  57 r25:  25 r26:  71 r27:  31 r28:   4 r29:   1 r30: 171 r31:  37 
x  :  15 y  :  43 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  10 add   :  12 
adiw  :   6 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  21 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  47 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   2 cpc   :  19 cpi   :   9 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   3 jmp   :  26 ld    :  21 ldd   :   7 ldi   : 123 
lds   :  19 lpm   :   7 lsl   :   2 lsr   :   0 mov   :  13 movw  :  10 
mul   :  10 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  21 pop   :   3 push  :   3 rcall :  23 ret   :  19 
reti  :   0 rjmp  :  23 rol   :   8 ror   :   0 sbc   :   5 sbci  :  14 
sbi   :  10 sbic  :   4 sbis  :   1 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :   2 sts   :  26 sub   :   2 subi  :   7 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000602   1502     36   1538   32768   4.7%
[.dseg] 0x000060 0x0002a6      0     70     70    2048   3.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
